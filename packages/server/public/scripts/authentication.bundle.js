"use strict";(self.webpackChunk_pagser_web=self.webpackChunk_pagser_web||[]).push([[950],{173:(e,a,s)=>{s.r(a),s.d(a,{default:()=>w});var t=s(2322),n=s(2833),o=s(289),r=s(2784),i=s(9644),l=s.n(i),c=s(7289),u=s(8229),d=function(){return d=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var n in a=arguments[s])Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);return e},d.apply(this,arguments)};const m=function(){var e,a=(0,r.useState)(""),s=a[0],n=a[1],i=(0,r.useState)(""),m=i[0],h=i[1],p=(0,r.useState)(""),f=p[0],v=p[1],g=(0,r.useState)("success"),y=g[0],w=g[1],x=(0,r.useState)(!1),j=x[0],b=x[1],S=(0,r.useState)(!1),N=S[0],P=S[1],k=(0,r.useState)(!1),C=k[0],E=k[1],_=(0,o.s0)();return(0,r.useEffect)((function(){switch(u.util.getParameterByName("redirected",window.location.href)){case"new-page":v("Please login in order to be able to create a new page."),w("normall");break;case"admin":v("Please login to access the admin area."),w("normall");break;case"access":v("Please login to proceed."),w("normall")}}),[]),null===(e=document.querySelector("#js--login-btn"))||void 0===e||e.classList.add("display-none"),document.querySelector("title").innerHTML="Login | Pagser",(0,t.jsxs)(r.Fragment,{children:[(0,t.jsxs)(c.Modal,d({header:"Reset your password",open:C,onClose:function(){E(!1)}},{children:[(0,t.jsx)("p",{children:"Put your email address here and we'll send you the instructions."}),(0,t.jsxs)("form",d({onSubmit:function(e){e.preventDefault(),P(!0),l().post("/api/forgotpassword",{email:s}).then((function(e){v("Instructions on how to reset your password were sent to ".concat(s)),w("success"),E(!1),P(!1)})).catch((function(e){v("No one with the email ".concat(s," was founded.")),w("error"),E(!1),P(!1)}))}},{children:[(0,t.jsx)("div",d({className:"form-group"},{children:(0,t.jsx)(c.Input,{type:"email",label:"Email",onChange:function(e){n(e)},value:s,required:!0})})),(0,t.jsx)("div",d({className:"u-flex-text-right"},{children:(0,t.jsx)(c.Button,d({type:"submit",rounded:!0,color:"blue",loading:N},{children:"Send"}))}))]}))]})),(0,t.jsxs)("div",d({className:"auth"},{children:[(0,t.jsxs)("div",d({className:"auth__options"},{children:[(0,t.jsx)("div",d({className:"auth__options--register",onClick:function(){_("/register")}},{children:"Register"})),(0,t.jsx)("div",d({className:"auth__options--login--active"},{children:"login"}))]})),(0,t.jsxs)("div",d({className:"auth__content"},{children:[(0,t.jsx)("h3",d({className:"heading-tertiary"},{children:"Log into your account"})),(0,t.jsxs)("p",d({className:"small-copy"},{children:["We are happy to see you logging in! Login to manage all of your pages. You can reset your password if you ","don't "," remember it."]})),(0,t.jsx)(c.Alert,{message:f||void 0,onClose:function(){v("")},type:y}),(0,t.jsxs)("form",d({method:"post",onSubmit:function(e){e.preventDefault(),b(!0),l().post("/login",{email:s,password:m}).then((function(e){localStorage.setItem("token",e.data.token),window.location.href="/home"})).catch((function(e){b(!1),v("Incorrect password or email address."),w("error")}))}},{children:[(0,t.jsx)("div",d({className:"form-group"},{children:(0,t.jsx)(c.Input,{type:"text",onChange:function(e){n(e)},label:"Email Address",value:s,required:!0})})),(0,t.jsx)("div",d({className:"form-group"},{children:(0,t.jsx)(c.Input,{type:"password",onChange:function(e){h(e)},label:"Your Password",value:m})})),(0,t.jsxs)("div",{children:[(0,t.jsx)("div",d({className:"form__group u-flex-text-center"},{children:(0,t.jsx)(c.Button,d({type:"submit",rounded:!0,outlined:!0,size:"big",color:"blue",loading:j},{children:"Sign In"}))})),(0,t.jsx)("button",d({type:"button",onClick:function(){E(!0)},className:"button-text"},{children:"Forgot your password?"}))]})]}))]}))]}))]})};var h=function(){return h=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var n in a=arguments[s])Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);return e},h.apply(this,arguments)};const p=function(){var e=(0,r.useState)(!1),a=e[0],s=e[1],n=(0,r.useState)(""),o=n[0],i=n[1],d=(0,r.useState)(!1),m=d[0],p=d[1],f=(0,r.useState)(""),v=f[0],g=f[1],y=(0,r.useState)(""),w=y[0],x=y[1],j=(0,r.useState)(!0),b=j[0],S=j[1],N=(0,r.useState)(!1),P=N[0],k=N[1],C=(0,r.useState)(""),E=C[0],_=C[1],B=(0,r.useState)("show-form"),I=B[0],L=B[1],A=(0,r.useState)(""),O=A[0],R=A[1],D=(0,r.useState)(!1),q=D[0],H=D[1];(0,r.useEffect)((function(){K()}),[o,E]);var T,K=function(){u.validate.isHardPassword(o)&&!u.validate.isEmpty(o)&&o===E?H(!1):H(!0)},M=function(){_(""),S(!0),x("")},U=function(e,a){"password"===a&&u.validate.isEmpty(e)&&(g("Please choose a password."),M()),"confirmPassword"===a&&u.validate.isEmpty(e)&&x("Please choose a password.")},F=function(e,a){"password"===a&&(i(e),M(),u.validate.isHardPassword(e)||u.validate.isEmpty(e)||(g("Password should contain a capital letter, letters and numbers."),M()),u.validate.len(e,8,30)||u.validate.isEmpty(e)||(g("Password should contain 8 to 30 characters."),M()),u.validate.len(e,8,30)&&!u.validate.isEmpty(e)&&u.validate.isHardPassword(e)&&(p(!0),g(""),S(!1))),"confirmPassword"===a&&(_(e),o!==e&&x("Passwords do not match up."),u.validate.isEmpty(E)||o!==e||(x(""),k(!0)))};return"show-form"===I&&(document.querySelector("title").innerHTML="Reset Password | Pagser",T=(0,t.jsxs)("div",h({className:"auth"},{children:[(0,t.jsx)("h3",h({className:"heading-tertiary"},{children:"Create a new password"})),(0,t.jsx)("p",h({className:"small-copy"},{children:"After resetting your password, you will prompted to login with your new password."})),(0,t.jsxs)("form",h({method:"post",onSubmit:function(e){e.preventDefault(),s(!0),l().post("/api/resetpassword",{userId:u.util.getParameterByName("i"),token:{code:u.util.getParameterByName("t")},password:o}).then((function(e){s(!1),L("success")})).catch((function(e){s(!1),"invalid link"===e.response.data.error&&(L("error"),R("The link you've clicked on is not valid, make sure that you open the exact link we've sent to your email.")),"link expired"===e.response.data.error&&(L("error"),R("The link you've clicked on has expired. Please request for a password reset once again."))}))}},{children:[(0,t.jsx)("div",h({className:"form-group"},{children:(0,t.jsx)(c.Input,{type:"password",value:o,error:v,onChange:function(e){F(e,"password")},success:m,onBlur:function(e){U(e,"password")},label:"Password"})})),(0,t.jsx)("div",h({className:"form-group"},{children:(0,t.jsx)(c.Input,{type:"password",error:w,value:E,success:P,onChange:function(e){F(e,"confirmPassword")},onBlur:function(e){U(e,"confirmPassword")},disabled:b,label:"Confirm Password"})})),(0,t.jsx)("div",h({className:"form__group u-flex-text-center"},{children:(0,t.jsx)(c.Button,h({type:"submit",loading:a,rounded:!0,disabled:q,color:"blue"},{children:"Reset"}))}))]}))]}))),"error"===I&&(T=(0,t.jsx)("div",h({className:"middle-box middle-box--absolute middle-box--error"},{children:O}))),"success"===I&&(T=(0,t.jsx)("div",h({className:"middle-box middle-box--absolute middle-box--success"},{children:"You have successfully reset your password. Now you can go ahead and login to your account with your new password."}))),T};var f=function(){return f=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var n in a=arguments[s])Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);return e},f.apply(this,arguments)};const v=function(e){var a=(0,r.useRef)(null),s=(0,r.useRef)(null),n=(0,r.useRef)(null),o=(0,r.useRef)(null),i=(0,r.useRef)(null),u=(0,r.useState)(""),d=u[0],m=u[1],h=(0,r.useState)(""),p=h[0],v=h[1],g=(0,r.useState)(""),y=g[0],w=g[1],x=(0,r.useState)(""),j=x[0],b=x[1],S=(0,r.useState)(""),N=S[0],P=S[1],k=(0,r.useState)(""),C=k[0],E=k[1],_=(0,r.useState)(!1),B=_[0],I=_[1],L=(0,r.useState)(!1),A=L[0],O=L[1],R=(0,r.useState)(null),D=R[0],q=R[1],H=(0,r.useState)("success"),T=H[0],K=H[1],M=(0,r.useState)(!1),U=M[0],F=M[1];(0,r.useEffect)((function(){z()}),[d,p,y,j,N]);var W=function(){var e;m(""),v(""),w(""),b(""),P(""),null===(e=a.current)||void 0===e||e.focus()},Y=function(){I(!0);var a="".concat(d).concat(p).concat(y).concat(j).concat(N);l().post("/register/validatecode",{code:Number(a)}).then((function(s){l().post("/register",{name:e.name,username:e.username,password:e.password,email:e.email,code:Number(a)}).then((function(e){localStorage.setItem("token",e.data.token),window.location.href="/home"})).catch((function(e){I(!1),q("Something went wrong, please try again."),K("error"),W()}))})).catch((function(e){I(!1),q("The code is invalid, make sure that you put the exact code we've sent to your email. You may want to resend the code."),K("error"),W()}))},z=function(){1===d.length&&1===p.length&&1===y.length&&1===j.length&&1===N.length&&Y()},V=function(e,a){var t,r,l,c;if(/^\d+$/.test(e))switch(a){case"first":m(e),null===(t=s.current)||void 0===t||t.focus();break;case"second":v(e),null===(r=n.current)||void 0===r||r.focus();break;case"third":w(e),null===(l=o.current)||void 0===l||l.focus();break;case"fourth":b(e),null===(c=i.current)||void 0===c||c.focus();break;case"fifth":P(e)}},Z=function(e,t){var r,l,c,u,d,h,p,f,g,y,x,j;if(8===e.keyCode)switch(t){case"first":m("");break;case"second":v(""),null===(r=a.current)||void 0===r||r.focus();break;case"third":w(""),null===(l=s.current)||void 0===l||l.focus();break;case"fourth":b(""),null===(c=n.current)||void 0===c||c.focus();break;case"fifth":P(""),null===(u=o.current)||void 0===u||u.focus()}if(37===e.keyCode)switch(t){case"second":null===(d=a.current)||void 0===d||d.focus();break;case"third":null===(h=s.current)||void 0===h||h.focus();break;case"fourth":null===(p=n.current)||void 0===p||p.focus();break;case"fifth":null===(f=o.current)||void 0===f||f.focus()}if(39===e.keyCode)switch(t){case"first":null===(g=s.current)||void 0===g||g.focus();break;case"second":null===(y=n.current)||void 0===y||y.focus();break;case"third":null===(x=o.current)||void 0===x||x.focus();break;case"fourth":null===(j=i.current)||void 0===j||j.focus()}};return(0,t.jsxs)("div",{children:[(0,t.jsxs)(c.Modal,f({header:"Change your email",open:U,onClose:function(){F(!1)}},{children:[(0,t.jsx)("p",{children:"Put your email address here and we will send a new code to that."}),(0,t.jsxs)("form",f({onSubmit:function(a){a.preventDefault(),O(!0),l().post("/api/sendcode",{name:e.name,username:e.username,password:e.password,email:C}).then((function(a){e.onEmailChange(C),q("New code has been sent to your email."),K("success"),F(!1),E(""),W(),O(!1)})).catch((function(e){"email is in use"===e.response.data.error?(q("".concat(C," is already in use, please login with this email or choose another one.")),K("error"),F(!1),W(),O(!1),E("")):(q("Something went wrong, please try again."),K("error"),W(),O(!1),E(""))}))}},{children:[(0,t.jsx)("div",f({className:"form-group"},{children:(0,t.jsx)(c.Input,{required:!0,type:"email",value:C,onChange:function(e){E(e)},label:"Email"})})),(0,t.jsx)("div",f({className:"u-flex-text-right"},{children:(0,t.jsx)(c.Button,f({type:"submit",rounded:!0,color:"blue",loading:A},{children:"Change"}))}))]}))]})),(0,t.jsxs)("div",f({className:"auth"},{children:[(0,t.jsx)("h3",f({className:"heading-tertiary"},{children:"Verify your email address"})),(0,t.jsxs)("p",f({className:"small-copy"},{children:[e.email," - The last step is to enter the 5 digits code we have just sent to your email to verify your email address."]})),(0,t.jsx)(c.Alert,{additionalClasses:"u-margin-bottom-2",message:D,onClose:function(){q(null)},type:T}),(0,t.jsxs)("form",f({onSubmit:function(e){e.preventDefault(),Y()}},{children:[(0,t.jsx)("div",f({className:"form__group"},{children:(0,t.jsxs)("div",f({className:"input-digits"},{children:[(0,t.jsx)("input",{type:"tel",autoFocus:!0,value:d,ref:a,onKeyDown:function(e){Z(e,"first")},onChange:function(e){V(e.target.value,"first")},disabled:B,maxLength:1}),(0,t.jsx)("input",{type:"tel",value:p,ref:s,onKeyDown:function(e){Z(e,"second")},onChange:function(e){V(e.target.value,"second")},disabled:B,maxLength:1}),(0,t.jsx)("input",{type:"tel",value:y,ref:n,onKeyDown:function(e){Z(e,"third")},onChange:function(e){V(e.target.value,"third")},disabled:B,maxLength:1}),(0,t.jsx)("input",{type:"tel",value:j,ref:o,onKeyDown:function(e){Z(e,"fourth")},onChange:function(e){V(e.target.value,"fourth")},disabled:B,maxLength:1}),(0,t.jsx)("input",{type:"tel",value:N,ref:i,onKeyDown:function(e){Z(e,"fifth")},onChange:function(e){V(e.target.value,"fifth")},disabled:B,maxLength:1})]}))})),!1===B?(0,t.jsxs)("div",f({className:"margin-top-3"},{children:[(0,t.jsx)("a",f({href:"javascript:void(0)",onClick:function(){F(!0)},className:"btn-text btn-text-underlined"},{children:"Change your email"})),(0,t.jsx)("br",{}),(0,t.jsx)("a",f({href:"javascript:void(0)",onClick:function(){I(!0),l().post("/api/sendcode",{name:e.name,username:e.username,password:e.password,email:e.email}).then((function(e){I(!1),q("New code has been sent to your email."),K("success"),W()})).catch((function(e){I(!1),q("Something went wrong, please try again."),K("error"),W()}))},className:"btn-text btn-text-underlined"},{children:"Resend code"}))]})):(0,t.jsx)("div",f({className:"margin-top-3"},{children:(0,t.jsx)("div",f({className:"center-content"},{children:(0,t.jsx)(c.Loading,{})}))}))]}))]}))]})};var g=function(){return g=Object.assign||function(e){for(var a,s=1,t=arguments.length;s<t;s++)for(var n in a=arguments[s])Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);return e},g.apply(this,arguments)};const y=function(){var e,a,s=(0,r.useState)(""),n=s[0],i=s[1],d=(0,r.useState)(""),m=d[0],h=d[1],p=(0,r.useState)(!1),f=p[0],y=p[1],w=(0,r.useState)(""),x=w[0],j=w[1],b=(0,r.useState)(""),S=b[0],N=b[1],P=(0,r.useState)(""),k=P[0],C=P[1],E=(0,r.useState)(""),_=E[0],B=E[1],I=(0,r.useState)(!1),L=I[0],A=(I[1],(0,r.useState)("")),O=A[0],R=A[1],D=(0,r.useState)(""),q=D[0],H=D[1],T=(0,r.useState)(!1),K=T[0],M=T[1],U=(0,r.useState)(""),F=U[0],W=U[1],Y=(0,r.useState)(!0),z=Y[0],V=Y[1],Z=(0,r.useState)(""),$=Z[0],G=Z[1],J=(0,r.useState)(!1),Q=J[0],X=J[1],ee=(0,r.useState)(null),ae=ee[0],se=ee[1],te=(0,r.useState)("show-form"),ne=te[0],oe=te[1],re=(0,r.useState)(null),ie=re[0],le=re[1],ce=(0,r.useState)("success"),ue=ce[0],de=ce[1],me=(0,r.useState)(!1),he=me[0],pe=me[1],fe=(0,o.s0)(),ve=function(){W(""),V(!0),G("")},ge=function(e,a){"name"===a&&(u.validate.isEmpty(e)&&h("Please enter your name."),u.validate.isAlpha(e)||u.validate.isEmpty(e)||h("Please enter a valid name that contains only letters."),u.validate.len(e,3,30)||u.validate.isEmpty(e)||h("Please enter a name that is between 3 and 30 characters."),u.validate.len(e,3,30)&&!u.validate.isEmpty(e)&&u.validate.isAlpha(e)&&(h(""),y(!0))),"username"===a&&(l().post("/usernameAvailability",{username:e}).then((function(a){"ok"===a.data.message?(N(""),se(!0)):"taken"===a.data.message&&(se(!1),N("".concat(e," is already taken, please choose another one.")))})),u.validate.isEmpty(e)&&(se(!1),N("Please choose a username.")),u.validate.len(e,5,15)||u.validate.isEmpty(e)||(se(!1),N("Please choose a username name between 5 and 15 characters.")),u.validate.isUsername(e)||u.validate.isEmpty(e)||(se(!1),N("Please choose a username that contains only letters, numbers and underscore."))),"email"===a&&(u.validate.isEmpty(e)&&B("Please enter your email."),u.validate.isEmail(e)||u.validate.isEmpty(e)||B("Please enter a valid email address."),u.validate.isEmail(e)&&B("")),"password"===a&&u.validate.isEmpty(e)&&(H("Please choose a password."),ve()),"confirmPassword"===a&&u.validate.isEmpty(e)&&G("Please confirm your password.")},ye=function(e,a){"password"===a&&(R(e),ve(),u.validate.isHardPassword(e)||u.validate.isEmpty(e)||(H("Password should at least contain a capital and a small letter, and a number."),ve()),u.validate.len(e,8,30)||u.validate.isEmpty(e)||(H("Password should contain 8 to 30 characters."),ve()),u.validate.len(e,8,30)&&!u.validate.isEmpty(e)&&u.validate.isHardPassword(e)&&(H(""),M(!0),V(!1))),"confirmPassword"===a&&(W(e),O!==e&&G("Passwords do not match up."),u.validate.isEmpty(F)||O!==e||(G(""),X(!0)))};return null===(e=document.querySelector("#js--login-btn"))||void 0===e||e.classList.add("display-none"),"show-form"===ne&&(document.querySelector("title").innerHTML="Register | Pagser",a=(0,t.jsx)("div",{children:(0,t.jsxs)("div",g({className:"auth"},{children:[(0,t.jsxs)("div",g({className:"auth__options"},{children:[(0,t.jsx)("div",g({className:"auth__options--register--active",onClick:function(){}},{children:"Register"})),(0,t.jsx)("div",g({className:"auth__options--login",onClick:function(){fe("/login")}},{children:"login"}))]})),(0,t.jsxs)("div",g({className:"auth__content"},{children:[(0,t.jsx)("h3",g({className:"heading-tertiary"},{children:"Create your account"})),(0,t.jsx)("p",g({className:"small-copy"},{children:"By creating an account you will be able to create pages, favorite pages, comment on other pages and more."})),(0,t.jsx)(c.Alert,{message:ie,onClose:function(){le(null)},type:ue}),(0,t.jsxs)("form",g({method:"post",onSubmit:function(e){e.preventDefault(),function(){if(ge(n,"name"),ge(x,"username"),ge(k,"email"),ge(O,"password"),ge(F,"confirmPassword"),ae&&!u.validate.isEmpty(n)&&u.validate.isAlpha(n)&&u.validate.len(n,3,30)&&!u.validate.isEmpty(x)&&u.validate.len(x,5,15)&&u.validate.isUsername(x)&&u.validate.isEmail(k)&&u.validate.isHardPassword(O)&&u.validate.len(O,8,30)&&O===F){pe(!0);var e={name:n,email:k,username:x,password:O};l().post("/api/sendcode",e).then((function(e){pe(!1),le(null),oe("verify-email")})).catch((function(e){pe(!1),"email is in use"===e.response.data.error?(le("This email is already in use, you can login or reset your password in the login tab."),de("error")):(le("Something went wrong, please try again."),de("error"))}))}}()}},{children:[(0,t.jsx)("div",g({className:"form-group",id:"name"},{children:(0,t.jsx)(c.Input,{type:"text",onBlur:function(e){ge(e,"name")},onChange:function(e){i(e)},label:"Full Name",error:m,success:f,value:n})})),(0,t.jsx)("div",g({className:"form-group",id:"username"},{children:(0,t.jsx)(c.Input,{type:"text",onBlur:function(e){ge(e,"username")},onChange:function(e){j(e)},label:"Username",error:S,success:ae||!1,value:x})})),(0,t.jsx)("div",g({className:"form-group",id:"email"},{children:(0,t.jsx)(c.Input,{type:"email",onBlur:function(e){ge(e,"email")},onChange:function(e){C(e)},label:"Email",error:_,success:L,value:k})})),(0,t.jsx)("div",g({className:"form-group",id:"password"},{children:(0,t.jsx)(c.Input,{type:"password",onBlur:function(e){ge(e,"password")},onChange:function(e){ye(e,"password")},label:"Password",error:q,success:K,value:O})})),(0,t.jsx)("div",g({className:"form-group",id:""},{children:(0,t.jsx)(c.Input,{type:"password",onBlur:function(e){ge(e,"confirmPassword")},onChange:function(e){ye(e,"confirmPassword")},label:"Confirm Password",disabled:z,error:$,success:Q,value:F})})),(0,t.jsxs)("div",g({className:"form__group margin-bottom-0"},{children:[(0,t.jsxs)("p",g({className:"a-9"},{children:["By clicking Sign Up, you agree to our"," ",(0,t.jsx)("a",g({href:"/terms-of-use",target:"_blank",className:"button-text"},{children:"Terms"}))," ","and"," ",(0,t.jsx)("a",g({href:"/privacy-policy",target:"_blank",className:"button-text"},{children:"Privacy Policy"})),"."]})),(0,t.jsx)("div",g({className:"margin-top-1-5 u-flex-text-center"},{children:(0,t.jsx)(c.Button,g({color:"blue",size:"big",rounded:!0,outlined:!0,type:"submit",loading:he},{children:"Sign Up"}))}))]}))]}))]}))]}))})),"verify-email"===ne&&(a=(0,t.jsx)(v,{name:n,username:x,email:k,password:O,onEmailChange:function(e){C(e)}})),a},w=function(e){return(0,t.jsx)(n.VK,{children:(0,t.jsxs)(o.Z5,{children:[(0,t.jsx)(o.AW,{path:"/login",element:(0,t.jsx)(m,{})}),(0,t.jsx)(o.AW,{path:"/forgot-password",element:(0,t.jsx)(p,{})}),(0,t.jsx)(o.AW,{path:"/register",element:(0,t.jsx)(y,{})})]})})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,