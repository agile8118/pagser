"use strict";(self.webpackChunk_pagser_web=self.webpackChunk_pagser_web||[]).push([[565,107,17,84,53,791],{4120:(e,t,n)=>{n.r(t),n.d(t,{default:()=>f});var a=n(2322),r=n(2784),o=n(5185),s=n(7289),i=n(8229),l=n(98),c=n(4604),u=function(){return u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},u.apply(this,arguments)},d=function(e,t,n,a){return new(n||(n=Promise))((function(r,o){function s(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((a=a.apply(e,t||[])).next())}))},h=function(e,t){var n,a,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,a&&(r=2&o[0]?a.return:o[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,o[1])).done)return r;switch(a=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,a=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],a=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}};const f=function(e){var t=(0,r.useState)(""),n=t[0],f=t[1],p=(0,r.useState)(!1),b=p[0],m=p[1],g=(0,r.useState)(!0),v=g[0],x=g[1],j=(0,r.useState)(!1),y=j[0],w=j[1],_=(0,o.v9)(l.pW),N=(0,o.v9)(l.cO).title,k=(0,o.v9)(c.mW),C=(0,o.v9)(c.sy),S=(0,o.v9)(l.NH),P=(0,o.I0)();(0,r.useEffect)((function(){e.type&&"public"===e.type&&P((0,l.ZD)()),setTimeout((function(){_&&O(_)}),15e3)}),[S]),(0,r.useEffect)((function(){n.toLowerCase().replace(/\s/g,"")===N.toLowerCase().replace(/\s/g,"")?x(!1):x(!0)}),[n]);var O=function(e){return d(void 0,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return[4,i.request.post("/views/".concat(e),null,{auth:!0})];case 1:return t.sent(),[2]}}))}))};if(S)return(0,a.jsx)("div",{});var L=C?"fa fa-bookmark":"fa fa-bookmark-o";return(0,a.jsxs)(r.Fragment,{children:[(0,a.jsx)(s.AddToCollection,{open:y,pageId:_,onClose:function(){w(!1)}}),(0,a.jsxs)("div",u({className:"page__header__actions"},{children:[(0,a.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){"spectator"===k?(console.log("DSd"),(0,i.alert)("Please login to be able to add pages to collections.")):w(!0)}},{children:(0,a.jsx)("i",{className:"fa fa-th-large","aria-hidden":"true"})})),"owner"===k?(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)(s.Modal,u({header:"Delete your page",open:b,onClose:function(){m(!1)}},{children:[(0,a.jsx)("p",u({className:"margin-bottom-08"},{children:"Are you sure that you want to delete your page? All of the comments and likes will be deleted."})),(0,a.jsxs)("form",u({onSubmit:function(e){e.preventDefault(),d(void 0,void 0,void 0,(function(){return h(this,(function(e){switch(e.label){case 0:return[4,i.request.delete("/pages/".concat(_),{auth:!0})];case 1:return e.sent(),location.reload(),[2]}}))}))}},{children:[(0,a.jsx)("div",u({className:"margin-bottom-08"},{children:(0,a.jsx)(s.Input,{type:"text",placeholder:"Type in your page title to confirm to delete it",onChange:function(e){f(e)},value:n,required:!0})})),(0,a.jsx)("strong",{children:N.toLowerCase()}),(0,a.jsx)("div",u({className:"u-flex-text-right"},{children:(0,a.jsx)(s.Button,u({color:"red",rounded:!0,type:"submit",id:"deleteButton",disabled:v},{children:"Delete"}))}))]}))]})),(0,a.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){var t;"public"===e.type?t="/public-pages/".concat(window.location.pathname.split("/")[2],"/edit?t=public"):"private"===e.type&&(t="/".concat(window.location.pathname.split("/")[1],"/").concat(window.location.pathname.split("/")[2],"/edit?t=private")),window.location.href="".concat(t)}},{children:(0,a.jsx)("i",{className:"fa fa-pencil-square-o"})})),(0,a.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){m(!0)}},{children:(0,a.jsx)("i",{className:"fa fa-trash-o"})}))]}):(0,a.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){P((0,l.V0)(_))}},{children:(0,a.jsx)("i",{className:L})}))]}))]})}},6367:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var a=n(2322),r=n(2784),o=n(5185),s=n(8229),i=n(7289),l=n(98),c=n(4604),u=function(){return u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},u.apply(this,arguments)};const d=function(){var e=(0,r.useState)(!1),t=e[0],n=e[1],d=(0,r.useState)(!1),h=d[0],f=d[1],p=(0,r.useState)(""),b=p[0],m=p[1],g=(0,r.useState)(""),v=g[0],x=g[1],j=(0,o.v9)(l.pW),y=(0,o.v9)(c.mW),w=(0,o.v9)(l.NH),_=(0,o.v9)(l.P8),N=(0,o.I0)();return w?(0,a.jsx)("div",{}):(0,a.jsxs)("div",u({className:"page__attach-files"},{children:[(0,a.jsx)(i.ConfirmModal,u({header:"Remove the attach file",open:h,onConfirm:function(){return e=void 0,t=void 0,a=function(){return function(e,t){var n,a,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,a&&(r=2&o[0]?a.return:o[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,o[1])).done)return r;switch(a=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,a=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],a=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}}(this,(function(e){switch(e.label){case 0:return f(!1),(0,s.loadingModal)("Deleting the attach file..."),[4,s.request.delete("/pages/".concat(j,"/attach-files/").concat(b),{auth:!0})];case 1:return e.sent(),N((0,l.Xo)("File deleted successfully.")),[2]}}))},new((n=void 0)||(n=Promise))((function(r,o){function s(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}l((a=a.apply(e,t||[])).next())}));var e,t,n,a},onCancel:function(){return f(!1)}},{children:(0,a.jsxs)("p",{children:["Are you sure that you want to delete this attach file"," ",(0,a.jsxs)("strong",{children:["'",v,"'"]}),"? Action cannot be undone."]})})),(0,a.jsx)("div",u({className:"file-links"},{children:"owner"===y?_.map((function(e){return(0,a.jsxs)("a",u({className:"file-link",href:"/api/pages/".concat(j,"/attach-files/").concat(e.name)},{children:[(0,a.jsx)("i",{className:"fa fa-download"})," "+e.name,(0,a.jsx)("button",u({className:"btn-i",onClick:function(t){t.preventDefault(),m(e._id),x(e.name),f(!0)}},{children:(0,a.jsx)("i",{className:"fa fa-times","aria-hidden":"true"})}))]}),e.name)})):_.map((function(e){return(0,a.jsxs)("a",u({className:"file-link",href:"/api/pages/".concat(j,"/attach-files/").concat(e.name)},{children:[(0,a.jsx)("i",{className:"fa fa-download"})," "+e.name]}),e.name)}))})),"owner"===y&&_.length<5?(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)(i.Button,u({color:"blue",size:"small",rounded:!0,onClick:function(){n(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-upload button__icon-left"})," Add an Attach File"]})),(0,a.jsx)(i.UploadAttachFile,{open:t,header:"Add an Attach File",text:"You can upload maximum of 5 files 10MB each for every page.",size:1e7,url:"/pages/".concat(j,"/attach-files"),success:function(){N((0,l.Xo)("File uploaded successfully."))},onClose:function(){n(!1)}})]}):(0,a.jsx)("div",{}),5===_.length&&"owner"===y&&(0,a.jsx)("em",{children:"You can only have 5 attach files for each page, if you want to upload a new one remove one of the attach files first."})]}))}},4217:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var a=n(2322),r=n(2784),o=n(5185),s=n(8229),i=n(7289),l=n(98),c=n(4604),u=function(){return u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},u.apply(this,arguments)};const d=function(){var e=(0,r.useState)(!1),t=e[0],n=e[1],d=(0,o.v9)(c.mW),h=(0,o.v9)(l.NH),f=(0,o.v9)(c.Yf),p=(0,o.v9)(l.a7),b=(0,o.I0)();if(h)return(0,a.jsx)("div",{});var m=p.biography.length?p.biography:"This user has not added a biography.",g=p.biography.length?"page__author__bio":"page__author__bio italic";return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.ConfirmModal,{header:"Unsubscribe from ".concat(p.username,"?"),message:"Are you sure that you want to unsubscribe from this author?",open:t,onConfirm:function(){n(!1),(0,s.loadingModal)("Unsubscribing..."),b((0,l.Ld)()),(0,s.loadingModal)()},onCancel:function(){n(!1)},btnName:"Unsubscribe"}),(0,a.jsxs)("div",u({className:"page__author"},{children:[(0,a.jsxs)("div",u({className:"page__author__head"},{children:[(0,a.jsx)("img",{src:p.photoUrl,id:"user-photo",alt:"Author image",onError:function(){document.querySelector("#user-photo").src="/images/users/placeholder.png"}}),(0,a.jsxs)("div",u({className:"page__author__details"},{children:[(0,a.jsx)("a",u({href:"/users/".concat(p.username),target:"_blank",className:"black-link"},{children:p.name})),(0,a.jsxs)("div",{children:[p.subscribersCount," Subscribers"]})]})),(0,a.jsx)("div",u({className:"page__author__sub"},{children:"owner"!==d&&(0,a.jsx)(i.Button,u({color:f?"default":"blue",rounded:!0,onClick:function(){if("authenticated"!==d)return(0,s.alert)("Please login to be able to subscribe to authors.");f?n(!0):b((0,l.Ld)())}},{children:f?"Subscribed":"Subscribe"}))}))]})),(0,a.jsx)("p",u({className:g},{children:m}))]}))]})}},7831:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var a=n(2322),r=n(2784),o=n(5185),s=n(7289),i=n(98),l=n(4604),c=function(){return c=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},c.apply(this,arguments)};const u=function(){var e=(0,r.useState)(!1),t=e[0],n=e[1],u=(0,r.useState)(!1),d=u[0],h=u[1],f=(0,o.v9)(i.pW),p=(0,o.v9)(l.mW),b=(0,o.v9)(i.NH),m=(0,o.v9)(i.Oo),g=(0,o.I0)();return(0,a.jsxs)(r.Fragment,{children:[!b&&(0,a.jsx)("div",c({className:"page__photo"},{children:(0,a.jsx)("img",{src:m,alt:"Page featured image",onLoad:function(e){e.target.classList.remove("display-none")},onError:function(e){e.target.classList.add("display-none")}})})),!b&&"owner"===p&&(0,a.jsxs)(r.Fragment,{children:[(0,a.jsx)(s.ConfirmModal,{header:"Remove your page photo",message:"Are you really sure that you want to delete your page photo?\n                  This cannot be undone.",open:d,onConfirm:function(){g((0,i.JJ)()),h(!1)},onCancel:function(){return h(!1)}}),(0,a.jsx)("div",c({className:"page__photo-actions"},{children:m?(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)(s.Button,c({color:"blue",size:"small",rounded:!0,onClick:function(){return n(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-upload button__icon-left"}),"Change Page Photo"]})),(0,a.jsxs)(s.Button,c({color:"red",size:"small",rounded:!0,onClick:function(){return h(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-trash button__icon-left"}),"Remove Page Photo"]}))]}):(0,a.jsxs)(s.Button,c({color:"blue",size:"small",rounded:!0,onClick:function(){return n(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-upload button__icon-left"}),"Upload a Page Photo"]}))})),(0,a.jsx)(s.UploadPhoto,{open:t,header:"Upload Page Photo",text:"Upload a beautiful photo to be set as a featured image of your page:",cropMsg:"Choose an area to be shown as for the page thumbnail, this won't\n                crop your image, this is just the area that will be shown as the\n                thumbnail.",inputLabelName:"Choose a photo",url:"/pages/".concat(f,"/photo"),minWidth:1200,minHeight:675,size:8e6,aspectRatio:48/27,success:function(e){return g((0,i.iQ)(e))},onClose:function(){n(!1)}})]})]})}},9096:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(2322),r=n(2784),o=n(5185),s=n(7289),i=n(98),l=n(4120),c=n(4217),u=n(3037),d=n(7831),h=n(6367),f=n(8009),p=function(){return p=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},p.apply(this,arguments)};const b=function(){var e=(0,o.v9)(i.NH),t=(0,o.v9)(i.pW),n=(0,o.v9)(i.cO),b=(0,o.v9)(i.iY),m=(0,o.v9)(i.nM),g=(0,o.I0)();return(0,r.useEffect)((function(){g((0,i.Y_)())}),[]),e?(0,a.jsx)("div",p({className:"center-content margin-top-2"},{children:(0,a.jsx)(s.Loading,{})})):"0"===t?(document.querySelector("body").classList.add("body-grey"),document.querySelector("title").innerHTML="Page Not Found | Pagser",(0,a.jsxs)("h3",p({className:"a-1 center-content"},{children:["Sorry but no page with this URL was found. ",(0,a.jsx)("br",{})," Maybe the author has deleted this page."]}))):(0,a.jsxs)("div",{children:[(0,a.jsx)("div",p({className:"row"},{children:(0,a.jsxs)("div",p({className:"page"},{children:[(0,a.jsxs)("div",p({className:"page__header"},{children:[(0,a.jsx)(l.default,{type:"private"}),(0,a.jsx)("h1",p({className:"page__header__title"},{children:n.title})),(0,a.jsx)("span",p({className:"page__header__time"},{children:b}))]})),(0,a.jsx)(d.default,{}),(0,a.jsxs)("div",p({className:"page__contents"},{children:[(0,a.jsxs)("div",p({className:"page__information"},{children:[n.briefDescription&&n.briefDescription.replace(/ /g,"").length>0?(0,a.jsxs)("div",{children:[(0,a.jsx)("strong",{children:"What's this page about?"}),n.briefDescription]}):(0,a.jsx)("div",{}),n.targets&&n.targets.replace(/ /g,"").length>0?(0,a.jsxs)("div",{children:[(0,a.jsx)("strong",{children:"Who's this page for?"}),n.targets]}):(0,a.jsx)("div",{})]})),(0,a.jsx)("hr",{}),(0,a.jsx)("div",p({className:"page__body"},{children:(0,a.jsx)("p",{dangerouslySetInnerHTML:{__html:n.body}})})),(0,a.jsx)(h.default,{})]})),m.anonymously?(0,a.jsx)("p",p({className:"normal-paragraph disabled-message"},{children:"This page has been created anonymously."})):(0,a.jsx)(c.default,{}),m.rating?(0,a.jsx)(u.default,{}):(0,a.jsx)("p",p({className:"normal-paragraph disabled-message"},{children:"Ratings are disabled for this page."}))]}))})),m.comments?(0,a.jsx)(f.default,{}):(0,a.jsx)("p",p({className:"normal-paragraph disabled-message-comments center-content"},{children:"Comments are disabled for this page."})),(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}},3037:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var a=n(2322),r=n(5185),o=n(8229),s=n(98),i=function(){return i=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},i.apply(this,arguments)};const l=function(){var e=(0,r.v9)(s.NH),t=(0,r.v9)(s.pW),n=(0,r.v9)(s.jv),l=(0,r.I0)(),c=function(e){return n=void 0,a=void 0,i=function(){var n;return function(e,t){var n,a,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,a&&(r=2&o[0]?a.return:o[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,o[1])).done)return r;switch(a=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,a=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],a=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}}(this,(function(a){switch(a.label){case 0:(0,o.loadingModal)("Loading..."),a.label=1;case 1:return a.trys.push([1,3,,4]),[4,o.request.patch("/rate/page/".concat(t),{rate:e},{auth:!0})];case 2:return n=a.sent(),l((0,s.Y4)(n)),[3,4];case 3:return 401===a.sent().status?(0,o.alert)("Please login to rate a page."):(0,o.alert)("An unknown error occurred."),[3,4];case 4:return(0,o.loadingModal)(),[2]}}))},new((r=void 0)||(r=Promise))((function(e,t){function o(e){try{l(i.next(e))}catch(e){t(e)}}function s(e){try{l(i.throw(e))}catch(e){t(e)}}function l(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(o,s)}l((i=i.apply(n,a||[])).next())}));var n,a,r,i};return e?(0,a.jsx)("div",{}):(0,a.jsx)("div",{children:(0,a.jsxs)("div",i({className:"page__rating"},{children:[(0,a.jsx)("p",{children:"How would you rate this page?"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("span",{children:n.likes}),(0,a.jsx)("button",i({className:"btn-i btn-i-big btn-i-blue",onClick:function(){c("like")}},{children:(0,a.jsx)("i",{className:"fa fa-thumbs-up"})}))]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("span",{children:n.dislikes}),(0,a.jsx)("button",i({className:"btn-i btn-i-big btn-i-blue",onClick:function(){c("dislike")}},{children:(0,a.jsx)("i",{className:"fa fa-thumbs-down"})}))]})]}))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,