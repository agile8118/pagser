"use strict";(self.webpackChunk_pagser_web=self.webpackChunk_pagser_web||[]).push([[845],{8074:(e,t,n)=>{n.r(t),n.d(t,{default:()=>N});var r=n(2322),a=n(2833),s=n(289),o=n(2784),i=n(7289),l=n(8229),c=function(){return c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},c.apply(this,arguments)};const u=function(){var e=(0,o.useState)("/images/users/placeholder.png"),t=e[0],n=e[1],a=(0,o.useState)(!1),s=a[0],u=a[1],d=!1;return(0,o.useEffect)((function(){return e=void 0,t=void 0,a=function(){var e,t;return function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}(this,(function(r){switch(r.label){case 0:d=!0,r.label=1;case 1:return r.trys.push([1,3,,4]),[4,l.request.get("/profile",{auth:!0})];case 2:return e=r.sent(),t=e.user,d&&n(t.photo.secure_url||"/images/users/placeholder.png"),[3,4];case 3:return 401===r.sent().status&&(window.location.href="/login?redirected=admin"),[3,4];case 4:return[2]}}))},new((r=void 0)||(r=Promise))((function(n,s){function o(e){try{l(a.next(e))}catch(e){s(e)}}function i(e){try{l(a.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}l((a=a.apply(e,t||[])).next())})),function(){d=!1};var e,t,r,a}),[]),(0,r.jsxs)(o.Fragment,{children:[(0,r.jsxs)("div",c({className:"center-content margin-top-3"},{children:[(0,r.jsx)("h3",c({className:"heading-tertiary",id:"photo"},{children:"Photo"})),(0,r.jsx)("img",{className:"profile__img",src:t,onError:function(){n("/images/users/placeholder.png")}}),(0,r.jsx)("br",{}),(0,r.jsx)("a",c({href:"javascript:void(0)",onClick:function(){u(!0)},className:"button-text"},{children:"Change or upload a new photo"}))]})),(0,r.jsx)(i.UploadPhoto,{open:s,header:"Upload a Profile Photo",text:"Upload a beautiful non-pixelated photo of yourself:",inputLabelName:"Choose your photo",url:"/profile/photo",minWidth:250,minHeight:250,size:5e6,aspectRatio:1,success:function(e){n(e)},onClose:function(){u(!1)}})]})};var d=function(){return d=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},d.apply(this,arguments)},f=function(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{l(r.next(e))}catch(e){s(e)}}function i(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}l((r=r.apply(e,t||[])).next())}))},h=function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}};const p=function(){var e=(0,o.useState)(!1),t=e[0],n=e[1],a=(0,o.useState)(!1),s=a[0],c=a[1],p=(0,o.useState)(""),m=p[0],v=p[1],b=(0,o.useState)(""),g=b[0],x=b[1],y=(0,o.useState)(""),w=y[0],j=y[1],N=(0,o.useState)(!1),_=N[0],P=N[1],k=(0,o.useState)(""),S=k[0],C=k[1],E=(0,o.useState)(""),O=E[0],L=E[1],Y=(0,o.useState)(""),I=Y[0],U=Y[1],A=(0,o.useState)(""),B=A[0],T=A[1],q=(0,o.useState)(""),F=q[0],W=q[1],G=(0,o.useState)(""),H=G[0],M=G[1],D=(0,o.useState)(""),V=D[0],z=D[1],K=(0,o.useState)(""),R=K[0],Z=K[1],J=(0,o.useState)(""),Q=J[0],X=J[1];(0,o.useEffect)((function(){document.title="Profile | Pagser",n(!0),f(void 0,void 0,void 0,(function(){var e,t;return h(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,l.request.get("/profile",{auth:!0})];case 1:return e=r.sent(),t=e.user,v(t.name),C(t.headline),U(t.biography),x(t.username),W(t.links.website),M(t.links.twitter),z(t.links.youtube),Z(t.links.linkedin),X(t.links.facebook),[3,3];case 2:return 401===r.sent().status&&(window.location.href="/login?redirected=admin"),[3,3];case 3:return n(!1),[2]}}))}))}),[]),(0,o.useEffect)((function(){l.validate.isEmpty(m)&&j("You must enter your name."),l.validate.isAlpha(m)||l.validate.isEmpty(m)||j("Your name should contains only letters."),l.validate.len(m,3,30)||l.validate.isEmpty(m)||j("Your name should be between 3 and 30 characters."),l.validate.len(m,3,30)&&!l.validate.isEmpty(m)&&l.validate.isAlpha(m)&&j("")}),[m]),(0,o.useEffect)((function(){l.validate.letterPercentage(S,60)||L("More than 60% of your headline must be letters."),l.validate.letterPercentage(S,60)&&L("")}),[S]),(0,o.useEffect)((function(){l.validate.letterPercentage(I,70)||T("More than 70% of your biography must be letters."),l.validate.letterPercentage(I,70)&&T("")}),[I]),(0,o.useEffect)((function(){$()}),[m,S,I]);var $=function(){l.validate.len(m,3,30)&&!l.validate.isEmpty(m)&&l.validate.isAlpha(m)&&l.validate.letterPercentage(S,60)&&l.validate.letterPercentage(I,70)?P(!1):P(!0)};return(0,r.jsx)("div",d({className:"row"},{children:(0,r.jsxs)("div",d({className:"admin"},{children:[(0,r.jsx)("div",d({className:"center-content"},{children:(0,r.jsx)("h3",d({className:"heading-tertiary",id:"information"},{children:"Your Information"}))})),t&&(0,r.jsx)("div",d({className:"center-content margin-top-2"},{children:(0,r.jsx)(i.Loading,{})})),!t&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",d({className:"form-group"},{children:(0,r.jsx)(i.Input,{value:m,error:w,label:"Name",placeholder:"Full name",onChange:function(e){v(e)}})})),(0,r.jsx)("div",d({className:"form-group"},{children:(0,r.jsx)(i.Input,{maxLength:50,label:"Headline",error:O,placeholder:"Describe yourself in few words",value:S,onChange:function(e){C(e)}})})),(0,r.jsxs)("div",d({className:"form-group"},{children:[(0,r.jsx)("label",{className:"form__label"}),(0,r.jsx)(i.Textarea,{label:"Biography",maxLength:250,error:B,value:I,onChange:function(e){U(e)},placeholder:"Add more information about yourself",rows:4})]})),(0,r.jsxs)("div",d({className:"form__group"},{children:[(0,r.jsx)("label",d({className:"form__label"},{children:"Links"})),(0,r.jsx)("div",d({className:"form__group--sm"},{children:(0,r.jsx)("input",{type:"text",maxLength:100,placeholder:"Website (http://www.example.com)",className:"form__input",value:F,onChange:function(e){W(e.target.value)}})})),(0,r.jsx)("div",d({className:"form__group--sm"},{children:(0,r.jsxs)("div",d({className:"input__group"},{children:[(0,r.jsx)("div",{children:"https://twitter.com/"}),(0,r.jsx)("input",{maxLength:100,type:"text",placeholder:"Twitter Profile",value:H,className:"form__input",onChange:function(e){M(e.target.value)}})]}))})),(0,r.jsx)("div",d({className:"form__group--sm"},{children:(0,r.jsxs)("div",d({className:"input__group"},{children:[(0,r.jsx)("div",{children:"https://youtube.com/"}),(0,r.jsx)("input",{maxLength:100,type:"text",placeholder:"Youtube Profile",value:V,className:"form__input",onChange:function(e){z(e.target.value)}})]}))})),(0,r.jsx)("div",d({className:"form__group--sm"},{children:(0,r.jsxs)("div",d({className:"input__group"},{children:[(0,r.jsx)("div",{children:"https://linkedin.com/"}),(0,r.jsx)("input",{maxLength:100,type:"text",placeholder:"LinkedIn Profile",value:R,className:"form__input",onChange:function(e){Z(e.target.value)}})]}))})),(0,r.jsx)("div",d({className:"form__group--sm"},{children:(0,r.jsxs)("div",d({className:"input__group"},{children:[(0,r.jsx)("div",{children:"https://facebook.com/"}),(0,r.jsx)("input",{type:"text",maxLength:100,placeholder:"Facebook Profile",value:Q,className:"form__input",onChange:function(e){X(e.target.value)}})]}))}))]})),(0,r.jsx)("div",d({className:"u-flex-text-right"},{children:(0,r.jsx)(i.Button,d({outlined:!0,color:"blue",rounded:!0,disabled:_,loading:s,onClick:function(){return f(void 0,void 0,void 0,(function(){return h(this,(function(e){switch(e.label){case 0:c(!0),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,l.request.patch("/profile",{name:m,headline:S,biography:I,links:{website:F,twitter:H,linkedin:R,youtube:V,facebook:Q}},{auth:!0})];case 2:return e.sent(),(0,l.alert)("Your profile was updated successfully.","success"),[3,4];case 3:return e.sent(),[3,4];case 4:return c(!1),[2]}}))}))}},{children:"Save"}))})),(0,r.jsx)(u,{}),(0,r.jsx)("div",d({className:"right-content margin-top-4"},{children:(0,r.jsxs)("a",d({href:"/users/".concat(g),target:"_blank",className:"button-text"},{children:["View public profile ",(0,r.jsx)("i",{className:"fa fa-arrow-right"})]}))}))]})]}))}))};var m=function(){return m=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},m.apply(this,arguments)};const v=function(){var e=(0,o.useState)(!1),t=e[0],n=e[1],a=(0,o.useState)(""),s=a[0],c=a[1];return(0,o.useEffect)((function(){var e,t,r,a;e=void 0,t=void 0,a=function(){var e;return function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}(this,(function(t){switch(t.label){case 0:n(!0),t.label=1;case 1:return t.trys.push([1,3,,4]),[4,l.request.get("/settings/email",{auth:!0})];case 2:return e=t.sent(),c(e.email),[3,4];case 3:return 401===t.sent().status&&(window.location.href="/login?redirected=admin"),[3,4];case 4:return n(!1),[2]}}))},new((r=void 0)||(r=Promise))((function(n,s){function o(e){try{l(a.next(e))}catch(e){s(e)}}function i(e){try{l(a.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,i)}l((a=a.apply(e,t||[])).next())}))}),[]),t?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",m({className:"form__group margin-bottom-0"},{children:(0,r.jsx)("label",m({className:"form__label"},{children:"Change Your Email"}))})),(0,r.jsx)("div",m({className:"left-content"},{children:(0,r.jsx)(i.Loading,{})}))]}):(0,r.jsxs)("form",m({className:"form",onSubmit:function(e){e.preventDefault()}},{children:[(0,r.jsx)("div",m({className:"form-roup"},{children:(0,r.jsx)(i.Input,{label:"Change Your Email",type:"text",value:s,placeholder:"Your New Email",onChange:function(e){c(e)}})})),(0,r.jsx)("div",m({className:"u-flex-text-right margin-top-2"},{children:(0,r.jsx)(i.Button,m({rounded:!0,outlined:!0,color:"blue",onClick:function(){(0,l.alert)("Sorry this part is still under development.")},type:"submit"},{children:"Change"}))}))]}))};var b=function(){return b=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},b.apply(this,arguments)};const g=function(){var e=(0,o.useState)(""),t=e[0],n=e[1],a=(0,o.useState)(""),s=a[0],c=a[1],u=(0,o.useState)(""),d=u[0],f=u[1],h=(0,o.useState)(""),p=h[0],m=h[1],v=(0,o.useState)(!0),g=v[0],x=v[1],y=(0,o.useState)(!0),w=y[0],j=y[1],N=function(){x(!0),m(""),f("")},_=function(e,t){"password"===t&&l.validate.isEmpty(e)&&(n(""),N(),j(!0)),"confirmPassword"===t&&l.validate.isEmpty(e)&&m("Please confirm your password.")},P=function(e,r){"password"===r&&(n(e),N(),j(!0),l.validate.isHardPassword(e)||l.validate.isEmpty(e)||(c("Password should contain a capital letter, letters and numbers."),N(),j(!0)),l.validate.len(e,8,30)||l.validate.isEmpty(e)||(c("Password should contain 8 to 30 characters."),j(!0),N()),l.validate.len(e,8,30)&&!l.validate.isEmpty(e)&&l.validate.isHardPassword(e)&&(c(""),x(!1))),"confirmPassword"===r&&(f(e),t!==e&&(m("Passwords do not match up."),j(!0)),l.validate.isEmpty(e)||t!==e||(m(""),j(!1)))};return(0,r.jsx)("div",{children:(0,r.jsxs)("form",b({method:"post",onSubmit:function(e){var r,a,s,o;e.preventDefault(),r=void 0,a=void 0,o=function(){return function(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}(this,(function(e){switch(e.label){case 0:(0,l.loadingModal)("Updating your password..."),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,l.request.patch("/settings/password",{password:t},{auth:!0})];case 2:return e.sent(),n(""),c(""),j(!0),(0,l.alert)("Password was updated successfully.","success"),[3,4];case 3:return e.sent(),[3,4];case 4:return(0,l.loadingModal)(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{l(o.next(e))}catch(e){t(e)}}function i(e){try{l(o.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof s?r:new s((function(e){e(r)}))).then(n,i)}l((o=o.apply(r,a||[])).next())}))}},{children:[(0,r.jsx)("label",b({className:"form__label margin-top-2"},{children:"Change Your Password"})),(0,r.jsx)("div",b({className:""},{children:(0,r.jsx)(i.Input,{placeholder:"New Password",type:"password",error:s,onBlur:function(e){_(e,"password")},onChange:function(e){P(e,"password")},value:t})})),(0,r.jsx)("div",b({className:"margin-top-1"},{children:(0,r.jsx)(i.Input,{type:"password",placeholder:"Confirm Password",error:p,disabled:g,onBlur:function(e){_(e,"confirmPassword")},onChange:function(e){P(e,"confirmPassword")},value:d})})),(0,r.jsx)("div",b({className:"u-flex-text-right margin-top-2"},{children:(0,r.jsx)(i.Button,b({color:"blue",type:"submit",outlined:!0,rounded:!0,disabled:w},{children:"Change"}))}))]}))})};var x=function(){return x=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},x.apply(this,arguments)};const y=function(){return document.title="Settings | Pagser",(0,r.jsx)("div",x({className:"row"},{children:(0,r.jsxs)("div",x({className:"admin"},{children:[(0,r.jsx)("div",x({className:"center-content"},{children:(0,r.jsx)("h3",x({className:"heading-tertiary margin-bottom-2"},{children:"Website and User Settings"}))})),(0,r.jsx)(v,{}),(0,r.jsx)(g,{})]}))}))};var w=function(){return w=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},w.apply(this,arguments)};const j=function(){var e=(0,o.useState)(window.location.pathname.split("/")[1]),t=e[0],n=e[1],s="btn-lined ".concat("settings"===t?"btn-lined--active":""),i="btn-lined ".concat("profile"===t?"btn-lined--active":"");return(0,r.jsx)("div",w({className:"admin__header"},{children:(0,r.jsx)("div",w({className:"row"},{children:(0,r.jsxs)("div",w({className:"lined-btns lined-btns-big margin-bottom-2 margin-top-1"},{children:[(0,r.jsxs)(a.rU,w({to:"/profile",className:i,onClick:function(){n("profile")}},{children:[(0,r.jsx)("i",{className:"fa fa-user margin-right-3px"})," Profile"]})),(0,r.jsxs)(a.rU,w({to:"/settings",className:s,onClick:function(){n("settings")}},{children:[(0,r.jsx)("i",{className:"fa fa-cogs margin-right-3px"})," Settings"]}))]}))}))}))},N=function(){return(0,r.jsxs)(a.VK,{children:[(0,r.jsx)(j,{}),(0,r.jsxs)(s.Z5,{children:[(0,r.jsx)(s.AW,{path:"/profile",element:(0,r.jsx)(p,{})}),(0,r.jsx)(s.AW,{path:"/settings",element:(0,r.jsx)(y,{})})]})]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,