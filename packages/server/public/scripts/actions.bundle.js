"use strict";(self.webpackChunk_pagser_web=self.webpackChunk_pagser_web||[]).push([[107],{4120:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});var o=n(2322),a=n(2784),i=n(5185),r=n(7289),l=n(8229),c=n(98),s=n(4604),u=function(){return u=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},u.apply(this,arguments)},f=function(e,t,n,o){return new(n||(n=Promise))((function(a,i){function r(e){try{c(o.next(e))}catch(e){i(e)}}function l(e){try{c(o.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}c((o=o.apply(e,t||[])).next())}))},d=function(e,t){var n,o,a,i,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,o&&(a=2&i[0]?o.return:i[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,i[1])).done)return a;switch(o=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,o=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((a=(a=r.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){r.label=i[1];break}if(6===i[0]&&r.label<a[1]){r.label=a[1],a=i;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(i);break}a[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],o=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};const p=function(e){var t=(0,a.useState)(""),n=t[0],p=t[1],b=(0,a.useState)(!1),h=b[0],v=b[1],m=(0,a.useState)(!0),w=m[0],g=m[1],y=(0,a.useState)(!1),x=y[0],j=y[1],k=(0,i.v9)(c.pW),C=(0,i.v9)(c.cO).title,N=(0,i.v9)(s.mW),S=(0,i.v9)(s.sy),_=(0,i.v9)(c.NH),D=(0,i.I0)();(0,a.useEffect)((function(){e.type&&"public"===e.type&&D((0,c.ZD)()),setTimeout((function(){k&&q(k)}),15e3)}),[_]),(0,a.useEffect)((function(){n.toLowerCase().replace(/\s/g,"")===C.toLowerCase().replace(/\s/g,"")?g(!1):g(!0)}),[n]);var q=function(e){return f(void 0,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return[4,l.request.post("/views/".concat(e),null,{auth:!0})];case 1:return t.sent(),[2]}}))}))};if(_)return(0,o.jsx)("div",{});var O=S?"fa fa-bookmark":"fa fa-bookmark-o";return(0,o.jsxs)(a.Fragment,{children:[(0,o.jsx)(r.AddToCollection,{open:x,pageId:k,onClose:function(){j(!1)}}),(0,o.jsxs)("div",u({className:"page__header__actions"},{children:[(0,o.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){"spectator"===N?(console.log("DSd"),(0,l.alert)("Please login to be able to add pages to collections.")):j(!0)}},{children:(0,o.jsx)("i",{className:"fa fa-th-large","aria-hidden":"true"})})),"owner"===N?(0,o.jsxs)(a.Fragment,{children:[(0,o.jsxs)(r.Modal,u({header:"Delete your page",open:h,onClose:function(){v(!1)}},{children:[(0,o.jsx)("p",u({className:"margin-bottom-08"},{children:"Are you sure that you want to delete your page? All of the comments and likes will be deleted."})),(0,o.jsxs)("form",u({onSubmit:function(e){e.preventDefault(),f(void 0,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return[4,l.request.delete("/pages/".concat(k),{auth:!0})];case 1:return e.sent(),location.reload(),[2]}}))}))}},{children:[(0,o.jsx)("div",u({className:"margin-bottom-08"},{children:(0,o.jsx)(r.Input,{type:"text",placeholder:"Type in your page title to confirm to delete it",onChange:function(e){p(e)},value:n,required:!0})})),(0,o.jsx)("strong",{children:C.toLowerCase()}),(0,o.jsx)("div",u({className:"u-flex-text-right"},{children:(0,o.jsx)(r.Button,u({color:"red",rounded:!0,type:"submit",id:"deleteButton",disabled:w},{children:"Delete"}))}))]}))]})),(0,o.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){var t;"public"===e.type?t="/public-pages/".concat(window.location.pathname.split("/")[2],"/edit?t=public"):"private"===e.type&&(t="/".concat(window.location.pathname.split("/")[1],"/").concat(window.location.pathname.split("/")[2],"/edit?t=private")),window.location.href="".concat(t)}},{children:(0,o.jsx)("i",{className:"fa fa-pencil-square-o"})})),(0,o.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){v(!0)}},{children:(0,o.jsx)("i",{className:"fa fa-trash-o"})}))]}):(0,o.jsx)("button",u({className:"btn-i btn-i-blue btn-i-big",onClick:function(){D((0,c.V0)(k))}},{children:(0,o.jsx)("i",{className:O})}))]}))]})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,