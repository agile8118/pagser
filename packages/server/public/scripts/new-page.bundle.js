"use strict";(self.webpackChunk_pagser_web=self.webpackChunk_pagser_web||[]).push([[133],{7421:(e,t,n)=>{n.r(t),n.d(t,{default:()=>Y});var a=n(2322),o=n(2833),i=n(289),r=n(2784),s=n(8229),l=n(7289),c=function(){return c=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},c.apply(this,arguments)};const u=function(e){var t={width:e.width+"%"};return(0,a.jsx)("div",c({id:"myProgress"},{children:(0,a.jsx)("div",{id:"myBar",style:t})}))};var d=function(){return d=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},d.apply(this,arguments)},h=function(e,t,n,a){return new(n||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},p=function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};const f=function(){var e=(0,r.useState)(void 0),t=e[0],n=e[1],o=(0,r.useState)(!1),c=(o[0],o[1]),f=(0,r.useState)(!1),m=f[0],g=f[1],b=(0,i.s0)();(0,r.useEffect)((function(){h(void 0,void 0,void 0,(function(){var e,t,a;return p(this,(function(o){switch(o.label){case 0:e=s.util.getParameterByName("id",window.location.href)||"id",o.label=1;case 1:return o.trys.push([1,3,,4]),[4,s.request.get("/new-page/initial-step/".concat(e),{auth:!0})];case 2:return t=o.sent(),n(t.type),c(!1),[3,4];case 3:return 401===(null==(a=o.sent())?void 0:a.status)&&(window.location.href="/login?redirected=new-page"),[3,4];case 4:return[2]}}))}))}),[]);var y=function(e){n(e)};return(0,a.jsxs)("div",{children:[(0,a.jsx)(u,{width:20}),(0,a.jsx)("div",d({className:"page-new"},{children:"public"===t||"private"===t||null===t?(0,a.jsxs)("div",{children:[(0,a.jsx)("div",d({className:"center-content"},{children:(0,a.jsx)("h3",d({className:"heading-tertiary"},{children:"Choose Your Page Type"}))})),(0,a.jsxs)("div",d({className:"page-new__types"},{children:[(0,a.jsxs)("label",d({className:"control control--radio"},{children:["Public",(0,a.jsx)("input",{type:"radio",value:"public",name:"radio",onClick:function(){y("public")},defaultChecked:"public"===t}),(0,a.jsx)("div",{className:"control__indicator"})]})),(0,a.jsx)("div",d({className:"page-new__types__details"},{children:"Choose this one if you want your page to be visible to everyone, your page can be founded by search engines if you supply it with good content. Public pages will be shown in your public profile unless you create it anonymously."})),(0,a.jsxs)("label",d({className:"control control--radio font-weight-400"},{children:["Private",(0,a.jsx)("input",{type:"radio",value:"private",name:"radio",defaultChecked:"private"===t,onClick:function(){y("private")}}),(0,a.jsx)("div",{className:"control__indicator"})]})),(0,a.jsxs)("div",d({className:"page-new__types__details"},{children:["Choose this if you want your page to be visible by only a specific kind of persons, such as your friends, workmates, students ,etc. You can restrict to only certain people to be able to view it. Your private pages will not been shown on your public profile."," ",(0,a.jsx)("strong",{children:"The only way for others to find the page is by the URL that you will give them."})]}))]})),(0,a.jsx)("div",d({className:"u-flex-text-center"},{children:(0,a.jsxs)(l.Button,d({onClick:function(){h(void 0,void 0,void 0,(function(){var e,n;return p(this,(function(a){switch(a.label){case 0:g(!0),e=s.util.getParameterByName("id",window.location.href),a.label=1;case 1:return a.trys.push([1,3,,4]),[4,s.request.patch("/new-page/initial-step/".concat(e),{page:{type:t}},{auth:!0})];case 2:return n=a.sent(),b("/new-page/page-contents?id=".concat(n.id)),[3,4];case 3:return a.sent(),[3,4];case 4:return g(!1),[2]}}))}))},color:"blue",disabled:!t,loading:m},{children:["Next",(0,a.jsx)("i",{className:"fa fa-arrow-circle-right button__icon-right"})]}))}))]}):(0,a.jsx)("div",d({className:"center-content"},{children:(0,a.jsx)(l.Loading,{})}))}))]})};var m=n(2882),g=n.n(m),b=function(){return b=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},b.apply(this,arguments)},y=function(e,t,n,a){return new(n||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},x=function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};const v=function(){var e=(0,r.useState)(null),t=e[0],n=e[1],o=(0,r.useState)(""),c=o[0],d=o[1],h=(0,r.useState)(""),p=h[0],f=h[1],m=(0,r.useState)(""),v=m[0],w=m[1],j=(0,r.useState)(""),N=j[0],_=j[1],k=(0,r.useState)(""),S=k[0],P=k[1],C=(0,r.useState)(""),B=C[0],T=C[1],O=(0,r.useState)(""),q=O[0],E=O[1],A=(0,r.useState)(""),L=A[0],M=A[1],U=(0,r.useState)(null),D=U[0],F=U[1],R=(0,r.useState)(!1),Y=R[0],W=R[1],I=(0,i.s0)();(0,r.useEffect)((function(){y(void 0,void 0,void 0,(function(){var e,t;return x(this,(function(a){switch(a.label){case 0:e=s.util.getParameterByName("id",window.location.href),a.label=1;case 1:return a.trys.push([1,3,,4]),[4,s.request.get("/new-page/page-contents/".concat(e),{auth:!0})];case 2:return t=a.sent(),E(t.page.contents.body),n(t.page.type),d(t.page.contents.title),P(t.page.contents.targets),w(t.page.contents.briefDes),[3,4];case 3:return 401===a.sent().status?window.location.href="/login?redirected=new-page":I("/new-page/initial-step"),[3,4];case 4:return[2]}}))}))}),[]),(0,r.useEffect)((function(){var e=setInterval((function(){D||G()}),5e3);return function(){return clearInterval(e)}}),[c,q,v,S]),(0,r.useEffect)((function(){Z()}),[q]),(0,r.useEffect)((function(){K()}),[S]);var z=function(e){e.preventDefault(),e.returnValue="Unsaved changes, are you sure you want to close?"};(0,r.useEffect)((function(){}),[D]);var G=function(e,t){return y(void 0,void 0,void 0,(function(){return x(this,(function(n){switch(n.label){case 0:e&&!(null==e?void 0:e.includes("page-thumbnail"))&&(0,s.loadingModal)("Loading..."),e&&e.includes("page-thumbnail")&&W(!0),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,s.request.patch("/new-page/page-contents/".concat(s.util.getParameterByName("id",window.location.href)),{page:{contents:{title:c,briefDes:v,body:q,targets:S}}},{auth:!0})];case 2:return n.sent(),F(!0),window.removeEventListener("beforeunload",z,!0),t&&(0,s.alert)(t,"success"),e&&((0,s.loadingModal)(),W(!1),I(e)),[3,4];case 3:return n.sent(),e&&((0,s.loadingModal)(),W(!1),I("/new-page/initial-step")),[3,4];case 4:return[2]}}))}))},V=function(e){var n="public"===t?15:1,a=e||c;return a.length<n?(f("public"===t?"Title should be more than ".concat(n," characters."):"Title cannot be be blank."),!1):a.length>50?(f("Title should be less than 50 characters."),!1):(f(""),!0)},H=function(){var e="public"===t?30:0;return v.length<e?(_("public"===t?"Brief description should be more than ".concat(e," characters."):""),!1):v.length>300?(_("Brief description should be less than 300 characters."),!1):(_(""),!0)},K=function(){var e="public"===t?20:0;return S.length<e?(T("Targets description should be more than ".concat(e," characters.")),!1):S.length>300?(T("Targets description should be less than 300 characters."),!1):(T(""),!0)},Z=function(){var e=q,n=document.createElement("div");n.innerHTML=e;var a=n.textContent||n.innerText||"";a=a.replace(/\s+/g," ").trim();var o="public"===t?50:0,i=document.querySelector(".mce-tinymce");return a.length<o&&i?(i.style.border="1px solid #e74c3c",M("public"===t?"Body should be more than ".concat(o," characters."):"Body cannot be blank."),!1):a.length>2e4&&i?(i.style.border="1px solid #e74c3c",M("Body should be less than 20000 characters."),!1):!!i&&(i.style.border="1px solid #CACACA",M(""),!0)};return(0,a.jsxs)(r.Fragment,{children:[(0,a.jsx)(u,{width:40}),(0,a.jsxs)("div",b({className:"page-new__note-box"},{children:[(0,a.jsx)("h3",{children:"A note about saving:"}),(0,a.jsxs)("p",{children:["We ",(0,a.jsx)("strong",{children:"automatically save"})," what you write and all the other changes you do, your page is saved as a draft until you decide to publish it, which you can do in the last step."]}),(0,a.jsxs)("p",{children:["You can view all of your draft pages"," ",(0,a.jsx)("a",b({href:"/u/pages/draft",target:"_blank",className:"button-text"},{children:"here"})),"."]})]})),(0,a.jsx)("div",b({className:"page-new"},{children:function(){var e;"private"===t&&(e=" *");var n="form__group";return n+=L&&" form__group--error",t?(0,a.jsxs)("div",{children:[(0,a.jsxs)("button",b({className:"button-text button-text--big a-11",onClick:function(){G("/new-page/initial-step?id=".concat(s.util.getParameterByName("id",window.location.href)))}},{children:[(0,a.jsx)("i",{className:"fa fa-arrow-left","aria-hidden":"true"})," Back"]})),(0,a.jsx)("div",b({className:"center-content"},{children:(0,a.jsx)("h3",b({className:"heading-tertiary"},{children:"Fill Out Your Page Content"}))})),(0,a.jsxs)("div",b({className:"page-new__contents"},{children:[(0,a.jsx)("div",b({className:"form-group"},{children:(0,a.jsx)(l.Input,{label:"private"===t?"Title *":"Title",id:"title",value:c,onChange:function(e){e&&V(e),d(e),F(!1)},placeholder:"Choose a title for your page.",maxLength:50,help:"this is some text to help you understand the input better.",error:p,onBlur:function(e){V(e)}})})),(0,a.jsx)("div",b({className:"form-group"},{children:(0,a.jsx)(l.Textarea,{label:"Brief Description",id:"briefDes",value:v,rows:3,onChange:function(e){e&&H(),w(e),F(!1)},placeholder:"Describe briefly what your page is all about.",help:"this is some text to help you understand the input better.",maxLength:300,error:N,onBlur:function(){H()}})})),(0,a.jsx)("div",b({className:"form-group"},{children:(0,a.jsx)(l.Textarea,{label:"Targets",value:S,id:"targets",rows:3,onChange:function(e){e&&K(),P(e),F(!1)},placeholder:"Describe briefly who this page is for.",help:"this is some text to help you understand the input better.",maxLength:300,error:B,onBlur:function(){K()}})})),(0,a.jsx)("hr",{className:"hr u-margin-top-5"}),(0,a.jsxs)("div",b({className:n,id:"body"},{children:[(0,a.jsxs)("label",b({htmlFor:"bodyInput",className:"form__label"},{children:["Page Body",e]})),(0,a.jsx)(g(),{content:q,config:{skin_url:"/tinymce-skin",plugins:"preview link lists advlist codesample image imagetools",toolbar:"formatselect | bold italic underline | link codesample image | alignleft aligncenter alignright | bullist numlist | outdent indent",block_formats:"Paragraph=p; Header=h2;",menubar:!1,statusbar:!1,image_dimensions:!1,imagetools_toolbar:"rotateleft rotateright | flipv fliph | imageoptions",height:350},onInit:function(){"dark"===localStorage.getItem("theme")&&(document.querySelector("iframe").contentDocument.children[0].children[1].style.background="#555",document.querySelector("iframe").contentDocument.children[0].children[1].style.color="#fff")},onChange:function(e){E(e.target.getContent()),F(!1)},onBlur:function(e){}},t),(0,a.jsxs)("span",b({className:"input-error"},{children:[L&&(0,a.jsx)("i",{className:"fa fa-exclamation-circle"}),L]}))]})),(0,a.jsxs)("div",{children:[!1===D&&(0,a.jsx)("p",b({className:"text-orange"},{children:"Saving changes..."})),!0===D&&(0,a.jsx)("p",b({className:"text-green"},{children:"Changes saved to the cloud!"}))]}),(0,a.jsx)("div",{children:(0,a.jsxs)("p",b({className:"small-paragraph"},{children:["See more information on what to provide in each input"," ",(0,a.jsx)("a",b({href:"#",target:"_blank",className:"button-text"},{children:"here."}))]}))}),(0,a.jsx)("div",b({className:"u-flex-text-center"},{children:(0,a.jsxs)(l.Button,b({onClick:function(){!function(){var e,n,a;if(function(){var e=q,n=document.createElement("div");n.innerHTML=e;var a=n.textContent||n.innerText||"";return a=a.replace(/\s+/g," ").trim(),"public"===t?!!(s.validate.len(c,15,50)&&s.validate.len(v,30,300)&&s.validate.len(S,20,300)&&s.validate.len(a,50,2e4)):"private"===t?!!(s.validate.len(c,1,50)&&s.validate.len(v,0,300)&&s.validate.len(S,0,300)&&s.validate.len(a,1,2e5)):void 0}())G("/new-page/page-thumbnail?id=".concat(s.util.getParameterByName("id",window.location.href)));else{if(!V())return void document.querySelector("#title").focus();if(!H())return void document.querySelector("#briefDes").focus();if(!K())return void document.querySelector("#targets").focus();Z()||(null===(e=document.getElementById("targetsInput"))||void 0===e||e.scrollIntoView(),null===(a=null===(n=document.querySelector("iframe"))||void 0===n?void 0:n.contentWindow)||void 0===a||a.document.body.focus())}}()},loading:Y,color:"blue",disabled:!t},{children:["Next",(0,a.jsx)("i",{className:"fa fa-arrow-circle-right button__icon-right"})]}))}))]}))]}):(0,a.jsx)("div",b({className:"center-content"},{children:(0,a.jsx)(l.Loading,{})}))}()}))]})};var w=function(){return w=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},w.apply(this,arguments)},j=function(e,t,n,a){return new(n||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},N=function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};const _=function(){var e=(0,r.useState)(""),t=e[0],n=e[1],o=(0,r.useState)(!1),c=o[0],d=o[1],h=(0,r.useState)(!1),p=h[0],f=h[1],m=(0,r.useState)(!1),g=m[0],b=m[1],y=(0,i.s0)();return(0,r.useEffect)((function(){j(void 0,void 0,void 0,(function(){var e,t,a;return N(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),d(!0),[4,s.request.get("/new-page/page-thumbnail/".concat(s.util.getParameterByName("id",window.location.href)),{auth:!0})];case 1:return e=o.sent(),n(null===(a=null===(t=null==e?void 0:e.page)||void 0===t?void 0:t.photo)||void 0===a?void 0:a.secure_url),d(!1),[3,3];case 2:return 401===o.sent().status?window.location.href="/login?redirected=new-page":y("/new-page/initial-step"),[3,3];case 3:return[2]}}))}))}),[]),(0,a.jsxs)(r.Fragment,{children:[(0,a.jsx)(u,{width:60}),(0,a.jsx)("div",w({className:"page-new"},{children:c?(0,a.jsx)("div",w({className:"center-content"},{children:(0,a.jsx)(l.Loading,{})})):(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)("button",w({className:"button-text button-text--big a-11",onClick:function(){y("/new-page/page-contents?id=".concat(s.util.getParameterByName("id",window.location.href)))}},{children:[(0,a.jsx)("i",{className:"fa fa-arrow-left","aria-hidden":"true"})," Back"]})),(0,a.jsx)("div",w({className:"center-content"},{children:(0,a.jsx)("h3",w({className:"heading-tertiary"},{children:"Choose a Page Thumbnail"}))})),(0,a.jsx)("p",w({className:"a-18"},{children:t?"This photo will be used for your page thumbnail:":"Upload a beautiful photo to set as a thumbnail of your page:"})),t&&(0,a.jsx)("img",{src:t}),(0,a.jsxs)("div",w({className:"new-page-thumbnail__action-buttons"},{children:[t&&(0,a.jsxs)(l.Button,w({size:"small",rounded:!0,color:"red",onClick:function(){b(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-trash button__icon-left"}),"Remove Page Photo"]})),(0,a.jsxs)(l.Button,w({color:"blue",rounded:!0,size:"small",onClick:function(){f(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-upload button__icon-left"}),t?"Change Page Photo":"Upload a Page Photo"]}))]})),(0,a.jsx)("p",w({className:"a-18 italic"},{children:t?"You can always change or remove your page photo after you published your page.":"You can always upload a new photo after you published your page, you can also skip uploading a photo for now and do it after publishing the page."})),(0,a.jsx)(l.UploadPhoto,{open:p,onClose:function(){f(!1)},header:"Upload Page Photo",text:"Upload a stunning photo to set as the featured image of your page:",cropMsg:"Choose an area to be shown as for the page thumbnail, this won't\n                crop your image, this is just the area that will be shown as the\n                thumbnail.",inputLabelName:"Choose a photo",url:"/pages/".concat(s.util.getParameterByName("id",window.location.href),"/photo?type=draft"),minWidth:1200,minHeight:675,size:8e6,aspectRatio:48/27,success:function(e){n(e)}}),t&&(0,a.jsx)(l.ConfirmModal,{header:"Remove your page photo",message:"Are you sure that you want to delete your page photo?\n                  This cannot be undo.",open:g,onConfirm:function(){j(void 0,void 0,void 0,(function(){return N(this,(function(e){switch(e.label){case 0:(0,s.loadingModal)("Removing the photo..."),e.label=1;case 1:return e.trys.push([1,3,,4]),[4,s.request.delete("/pages/".concat(s.util.getParameterByName("id",window.location.href),"/photo?type=draft"),{auth:!0})];case 2:return e.sent(),n(""),(0,s.loadingModal)(),(0,s.alert)("Photo was successfully removed.","success"),[3,4];case 3:return e.sent(),(0,s.loadingModal)(),(0,s.alert)("There was problem with removing the photo.","error"),[3,4];case 4:return[2]}}))})),b(!1)},onCancel:function(){b(!1)}}),(0,a.jsx)("div",w({className:"u-flex-text-center"},{children:(0,a.jsxs)(l.Button,w({onClick:function(){y("/new-page/attach-files?id=".concat(s.util.getParameterByName("id",window.location.href)))},color:t?"blue":"default"},{children:[t?"Next":"Skip",(0,a.jsx)("i",{className:"fa fa-arrow-circle-right button__icon-right"})]}))}))]})})),(0,a.jsxs)("div",w({className:"page-new__note-box"},{children:[(0,a.jsx)("h3",{children:"Why it's important to choose a thumbnail for your page?"}),(0,a.jsx)("p",{children:"A good page thumbnail will help to increase your page views and let other users distinguish your page more and make it more recognizable if they add it to their collections or other places."}),(0,a.jsx)("p",{children:(0,a.jsx)("strong",{children:"We highly suggest you choose a photo for your page thumbnail."})})]}))]})};var k=function(){return k=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},k.apply(this,arguments)},S=function(e,t,n,a){return new(n||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},P=function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};const C=function(){var e=(0,r.useState)([]),t=e[0],n=e[1],o=(0,r.useState)(""),c=(o[0],o[1],(0,r.useState)(!1)),d=c[0],h=c[1],p=(0,r.useState)(!1),f=p[0],m=p[1],g=(0,r.useState)(""),b=g[0],y=g[1],x=(0,r.useState)(!1),v=x[0],w=x[1],j=(0,i.s0)();(0,r.useEffect)((function(){N()}),[]);var N=function(e){return S(void 0,void 0,void 0,(function(){var t;return P(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),h(!0),[4,s.request.get("/pages/".concat(s.util.getParameterByName("id",window.location.href),"/attach-files?type=draft"),{auth:!0})];case 1:return t=a.sent(),n(t.attachFiles),h(!1),e&&(0,s.alert)(e,"success"),[3,3];case 2:return 401===a.sent().status?window.location.href="/login?redirected=new-page":j("/new-page/initial-step"),[3,3];case 3:return[2]}}))}))};return(0,a.jsxs)(r.Fragment,{children:[(0,a.jsx)(u,{width:80}),(0,a.jsx)("div",k({className:"page-new"},{children:d?(0,a.jsx)("div",k({className:"center-content"},{children:(0,a.jsx)(l.Loading,{})})):(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)("button",k({className:"button-text button-text--big a-11",onClick:function(){j("/new-page/page-thumbnail?id=".concat(s.util.getParameterByName("id",window.location.href)))}},{children:[(0,a.jsx)("i",{className:"fa fa-arrow-left","aria-hidden":"true"})," Back"]})),(0,a.jsx)("div",k({className:"center-content"},{children:(0,a.jsx)("h3",k({className:"heading-tertiary"},{children:"Add Attach Files"}))})),(0,a.jsx)("p",k({className:"a-18"},{children:"Add attach files for your page in pretty much any format that you want:"})),(0,a.jsxs)(l.Button,k({color:"blue",size:"small",rounded:!0,onClick:function(){w(!0)}},{children:[(0,a.jsx)("i",{className:"fa fa-upload button__icon-left"})," Add an Attach File"]})),(0,a.jsx)(l.ConfirmModal,{header:"Remove the attach file",open:f,message:"Are you sure that you want to remove this attach file?",onConfirm:function(){return S(void 0,void 0,void 0,(function(){return P(this,(function(e){switch(e.label){case 0:return m(!1),(0,s.loadingModal)("Deleting the attach file..."),[4,s.request.delete("/pages/".concat(s.util.getParameterByName("id",window.location.href),"/attach-files/").concat(b,"?type=draft"),{auth:!0})];case 1:return e.sent(),(0,s.loadingModal)(),N("File deleted successfully."),[2]}}))}))},onCancel:function(){return m(!1)}}),(0,a.jsx)(l.UploadAttachFile,{open:v,header:"Add an Attach File",text:"You can upload maximum of 5 files 10MB each for every page.",size:1e7,url:"/pages/".concat(s.util.getParameterByName("id",window.location.href),"/attach-files?type=draft"),success:function(){N("File uploaded successfully.")},onClose:function(){w(!1)}}),(0,a.jsx)("div",k({className:"new-page-attach-files__files"},{children:t.map((function(e){return(0,a.jsxs)("a",k({className:"file-link",href:"/api/pages/".concat(s.util.getParameterByName("id",window.location.href),"/attach-files/").concat(e.name)},{children:[(0,a.jsx)("i",{className:"fa fa-download"})," "+e.name,(0,a.jsx)("button",k({className:"btn-i",onClick:function(t){t.preventDefault(),m(!0),y(e._id)}},{children:(0,a.jsx)("i",{className:"fa fa-times","aria-hidden":"true"})}))]}),e.name)}))})),(0,a.jsx)("p",k({className:"a-18 italic"},{children:t.length?"You can always add/remove attach files after you published your page.":"You can always add/remove attach files after you published your page, you can also skip this for now and do it after you published your page."})),(0,a.jsx)("div",k({className:"u-flex-text-center"},{children:(0,a.jsxs)(l.Button,k({onClick:function(){j("/new-page/final-step?id=".concat(s.util.getParameterByName("id",window.location.href)))},color:t.length?"blue":"default"},{children:[t.length?"Next":"Skip",(0,a.jsx)("i",{className:"fa fa-arrow-circle-right button__icon-right"})]}))}))]})}))]})};var B=function(){return B=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},B.apply(this,arguments)},T=function(e,t,n,a){return new(n||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},O=function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};const q=function(e){var t=(0,r.useState)(e.comments),n=t[0],o=t[1],c=(0,r.useState)(e.rating),u=c[0],d=c[1],h=(0,r.useState)(e.links),p=h[0],f=h[1],m=(0,r.useState)(e.anonymously),g=m[0],b=m[1],y=(0,r.useState)(e.tags),x=y[0],v=y[1],w=(0,r.useState)(""),j=w[0],N=w[1],_=(0,r.useState)(!1),k=_[0],S=_[1],P=(0,i.s0)();(0,r.useEffect)((function(){document.querySelector("div.tags-input")||(0,s.tagsInput)(document.querySelector('input[type="tags"]')),document.querySelector("#tags").addEventListener("change",(function(){v(this.value)}))}),[]),(0,r.useEffect)((function(){(0,s.loadingModal)("Loading..."),C((function(){(0,s.loadingModal)()}))}),[n,u,p,g]),(0,r.useEffect)((function(){x&&(C(),q())}),[x]);var C=function(e){return T(void 0,void 0,void 0,(function(){var t;return O(this,(function(a){switch(a.label){case 0:return a.trys.push([0,2,,3]),t={type:"public",configurations:{comments:n,rating:u,links:p,anonymously:g},tags:x},[4,s.request.patch("/new-page/final-step/".concat(s.util.getParameterByName("id",window.location.href)),{page:t},{auth:!0})];case 1:return a.sent(),e&&e(),[3,3];case 2:return a.sent(),(0,s.loadingModal)(),P("/new-page/initial-step"),[3,3];case 3:return[2]}}))}))},q=function(){return x.split(",").length<5?(N("Please choose at least 5 tags."),!1):x.replace(/,/g,"").length>=200?(N("Tags must be less than 200 characters."),!1):(N(""),!0)},E=function(e){switch(e){case"comments":o(!n);break;case"rating":d(!u);break;case"links":f(!p);break;case"anonymously":b(!g)}};return(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)("button",B({className:"button-text button-text--big a-11",onClick:function(){C((function(){(0,s.loadingModal)(),P("/new-page/attach-files?id=".concat(s.util.getParameterByName("id",window.location.href)))}))}},{children:[(0,a.jsx)("i",{className:"fa fa-arrow-left","aria-hidden":"true"})," Back"]})),(0,a.jsx)("div",B({className:"center-content"},{children:(0,a.jsx)("h3",B({className:"heading-tertiary"},{children:"Configurations and Tags"}))})),(0,a.jsxs)("div",B({className:"page-new__final-step"},{children:[(0,a.jsxs)("div",B({className:"new-page-final-step__switches"},{children:[(0,a.jsxs)("div",B({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Disable Comments"}),(0,a.jsxs)("div",B({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",B({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",B({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",B({className:"btn-i btn-i-blue",onClick:function(){return E("comments")}},{children:(0,a.jsx)("i",{className:n?"fa fa-2x fa-toggle-off":"fa fa-2x fa-toggle-on","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]})),(0,a.jsxs)("div",B({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Disable Rating"}),(0,a.jsxs)("div",B({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",B({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",B({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",B({className:"btn-i btn-i-blue",onClick:function(){return E("rating")}},{children:(0,a.jsx)("i",{className:u?"fa fa-2x fa-toggle-off":"fa fa-2x fa-toggle-on","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]})),(0,a.jsxs)("div",B({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Do Not Display Related Pages and Tags"}),(0,a.jsxs)("div",B({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",B({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",B({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",B({className:"btn-i btn-i-blue",onClick:function(){return E("links")}},{children:(0,a.jsx)("i",{className:p?"fa fa-2x fa-toggle-off":"fa fa-2x fa-toggle-on","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]})),(0,a.jsxs)("div",B({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Create This Page Anonymously"}),(0,a.jsxs)("div",B({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",B({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",B({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",B({className:"btn-i btn-i-blue",onClick:function(){return E("anonymously")}},{children:(0,a.jsx)("i",{className:g?"fa fa-2x fa-toggle-on":"fa fa-2x fa-toggle-off","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]}))]})),(0,a.jsxs)("div",B({className:"form__group"},{children:[(0,a.jsx)("label",B({className:"form__label",htmlFor:"tags"},{children:"Tags"})),(0,a.jsx)("input",{type:"tags",className:"tags-input",id:"tags",defaultValue:x}),j&&(0,a.jsxs)("span",B({className:"input-error"},{children:[(0,a.jsx)("i",{className:"fa fa-exclamation-circle"}),j]}))]})),(0,a.jsx)("div",B({className:"margin-top-1"},{children:(0,a.jsxs)("p",B({className:"small-paragraph"},{children:["Please read"," ",(0,a.jsx)("a",B({href:"#",target:"_blank",className:"button-text"},{children:"this"}))," ","quick guide before you change any of the configurations and choose any tags."]}))}))]})),(0,a.jsx)("div",B({className:"u-flex-text-center"},{children:(0,a.jsxs)(l.Button,B({onClick:function(){!function(){if(!q())return document.querySelector("#tags").focus();S(!0),C((function(){return T(void 0,void 0,void 0,(function(){var e,t;return O(this,(function(n){switch(n.label){case 0:e=s.util.getParameterByName("id",window.location.href),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,s.request.post("/new-page/".concat(e),null,{auth:!0})];case 2:return t=n.sent(),P("/new-page/message?type=public&status=success&url=".concat(t.url)),[3,4];case 3:return"error with contents"===n.sent().message.error?P("/new-page/message?type=public&status=error-contents&id=".concat(e)):P("/new-page/message?type=public&status=error"),[3,4];case 4:return(0,s.loadingModal)(),S(!1),[2]}}))}))}))}()},loading:k,color:"green"},{children:["Publish",(0,a.jsx)("i",{className:"fa fa-globe button__icon-right"})]}))}))]})};var E=function(){return E=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},E.apply(this,arguments)},A=function(e,t,n,a){return new(n||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},L=function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};const M=function(e){var t=(0,r.useState)(e.comments),n=t[0],o=t[1],c=(0,r.useState)(e.rating),u=c[0],d=c[1],h=(0,r.useState)(e.anonymously),p=h[0],f=h[1],m=(0,r.useState)(e.url),g=m[0],b=m[1],y=(0,r.useState)(""),x=y[0],v=y[1],w=(0,r.useState)(!1),j=w[0],N=w[1],_=(0,i.s0)();(0,r.useEffect)((function(){(0,s.loadingModal)("Loading..."),P((function(){(0,s.loadingModal)()}))}),[u,n,p]),(0,r.useEffect)((function(){g&&S()}),[g]);var k=function(e){switch(e){case"comments":o(!n);break;case"rating":d(!u);break;case"anonymously":f(!p)}},S=function(){return g&&g.length>0&&-1===e.usedUrls.indexOf(g)?(v(""),!0):-1!==e.usedUrls.indexOf(g)?(v('You have already used "'.concat(g,'" url, choose something else.')),!1):(v("Please choose a URL for your page."),!1)},P=function(e){return A(void 0,void 0,void 0,(function(){var t;return L(this,(function(a){switch(a.label){case 0:t={id:s.util.getParameterByName("id",window.location.href),type:"private",configurations:{comments:n,rating:u,anonymously:p},url:g},a.label=1;case 1:return a.trys.push([1,3,,4]),[4,s.request.patch("/new-page/final-step/".concat(s.util.getParameterByName("id",window.location.href)),{page:t},{auth:!0})];case 2:return a.sent(),e&&e(),[3,4];case 3:return a.sent(),e&&(0,s.loadingModal)(),_("/new-page/initial-step"),[3,4];case 4:return[2]}}))}))};return(0,a.jsxs)(r.Fragment,{children:[(0,a.jsxs)("button",E({className:"button-text button-text--big a-11",onClick:function(){P((function(){(0,s.loadingModal)(),_("/new-page/attach-files?id=".concat(s.util.getParameterByName("id",window.location.href)))}))}},{children:[(0,a.jsx)("i",{className:"fa fa-arrow-left","aria-hidden":"true"})," Back"]})),(0,a.jsx)("div",E({className:"center-content"},{children:(0,a.jsx)("h3",E({className:"heading-tertiary"},{children:"Configurations and URL"}))})),(0,a.jsxs)("div",E({className:"page-new__final-step"},{children:[(0,a.jsxs)("div",E({className:"new-page-final-step__switches"},{children:[(0,a.jsxs)("div",E({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Disable Comments"}),(0,a.jsxs)("div",E({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",E({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",E({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",E({className:"btn-i btn-i-blue",onClick:function(){return k("comments")}},{children:(0,a.jsx)("i",{className:n?"fa fa-2x fa-toggle-off":"fa fa-2x fa-toggle-on","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]})),(0,a.jsxs)("div",E({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Disable Rating"}),(0,a.jsxs)("div",E({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",E({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",E({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",E({className:"btn-i btn-i-blue",onClick:function(){return k("rating")}},{children:(0,a.jsx)("i",{className:u?"fa fa-2x fa-toggle-off":"fa fa-2x fa-toggle-on","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]})),(0,a.jsxs)("div",E({className:"new-page-final-step__switch"},{children:[(0,a.jsx)("label",{children:"Create This Page Anonymously"}),(0,a.jsxs)("div",E({className:"tooltip tooltip-top tooltip--info"},{children:[(0,a.jsx)("a",E({href:"#",className:"tooltip__icon"},{children:"?"})),(0,a.jsx)("span",E({className:"tooltip__text"},{children:"lorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adiplorem ipsum dolor sit amet, consectetur adip"}))]})),(0,a.jsx)("button",E({className:"btn-i btn-i-blue",onClick:function(){return k("anonymously")}},{children:(0,a.jsx)("i",{className:p?"fa fa-2x fa-toggle-on":"fa fa-2x fa-toggle-off","aria-hidden":"true"})})),(0,a.jsx)("input",{type:"hidden",value:"false"})]}))]})),(0,a.jsxs)("div",E({className:"form-group"},{children:[(0,a.jsx)(l.Input,{id:"url",label:"URL",placeholder:"Choose a URL for your page.",type:"text",error:x,value:g,onBlur:function(){P(),S()},onChange:function(e){b(s.util.convertToUrl(e))}}),(0,a.jsxs)("p",E({className:"url__display"},{children:["pagser.com/",e.username,"/",g]})),(0,a.jsxs)("div",E({className:"url__note"},{children:[(0,a.jsx)("strong",{children:"Important note about URL:"}),(0,a.jsxs)("p",{children:["This URL will be for your page, please copy this because the only way other persons can view this page is to have this URL. ",(0,a.jsx)("br",{})," ","You should share this URL in order for others to view it."]})]}))]}))]})),(0,a.jsx)("div",E({className:"u-flex-text-center"},{children:(0,a.jsxs)(l.Button,E({onClick:function(){!function(){if(!S())return document.querySelector("#url").focus();N(!0),P((function(){return A(void 0,void 0,void 0,(function(){var e,t;return L(this,(function(n){switch(n.label){case 0:e=s.util.getParameterByName("id",window.location.href),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,s.request.post("/new-page/".concat(e),null,{auth:!0})];case 2:return t=n.sent(),_("/new-page/message?type=private&status=success&url=".concat(t.url,"&username=").concat(t.username)),[3,4];case 3:return"error with contents"===n.sent().message.error?_("/new-page/message?type=private&status=error-contents&id=".concat(e)):_("/new-page/message?type=private&status=error"),[3,4];case 4:return N(!1),(0,s.loadingModal)(),[2]}}))}))}))}()},loading:j,color:"green"},{children:["Publish",(0,a.jsx)("i",{className:"fa fa-globe button__icon-right"})]}))}))]})};var U=function(){return U=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},U.apply(this,arguments)};const D=function(){var e,t=(0,r.useState)(null),n=t[0],o=t[1],c=(0,r.useState)(null),d=c[0],h=c[1],p=(0,r.useState)(null),f=p[0],m=p[1],g=(0,r.useState)(null),b=g[0],y=g[1],x=(0,r.useState)(null),v=x[0],w=x[1],j=(0,r.useState)(""),N=j[0],_=j[1],k=(0,r.useState)(null),S=k[0],P=k[1],C=(0,r.useState)(null),B=C[0],T=C[1],O=(0,r.useState)([]),E=O[0],A=O[1],L=(0,i.s0)();return(0,r.useEffect)((function(){var e,t,n,a;e=void 0,t=void 0,a=function(){var e;return function(e,t){var n,a,o,i,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,a&&(o=2&i[0]?a.return:i[0]?a.throw||((o=a.return)&&o.call(a),0):a.next)&&!(o=o.call(a,i[1])).done)return o;switch(a=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return r.label++,{value:i[1],done:!1};case 5:r.label++,a=i[1],i=[0];continue;case 7:i=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){r=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){r.label=i[1];break}if(6===i[0]&&r.label<o[1]){r.label=o[1],o=i;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(i);break}o[2]&&r.ops.pop(),r.trys.pop();continue}i=t.call(e,r)}catch(e){i=[6,e],a=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,s.request.get("/new-page/final-step/".concat(s.util.getParameterByName("id",window.location.href)),{auth:!0})];case 1:return e=t.sent(),o(e.page.type),h(e.page.configurations.comments),m(e.page.configurations.rating),y(e.page.configurations.anonymously),w(e.page.configurations.links),_(e.page.tags[0]?e.page.tags[0]:""),P(e.page.author.username),T(e.page.url||null),A(e.urls),[3,3];case 2:return 401===t.sent().status?window.location.href="/login?redirected=new-page":L("/new-page/initial-step"),[3,3];case 3:return[2]}}))},new((n=void 0)||(n=Promise))((function(o,i){function r(e){try{l(a.next(e))}catch(e){i(e)}}function s(e){try{l(a.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))}),[]),n?"public"===n?e=(0,a.jsx)(q,{comments:d||!1,rating:f||!1,links:v||!1,anonymously:b||!1,tags:N}):"private"===n&&(e=(0,a.jsx)(M,{username:S||"",comments:d||!1,rating:f||!1,anonymously:b||!1,url:B||"",usedUrls:E})):e=(0,a.jsx)("div",U({className:"center-content"},{children:(0,a.jsx)(l.Loading,{})})),(0,a.jsxs)("div",U({id:"new-page-container"},{children:[(0,a.jsx)(u,{width:100}),(0,a.jsx)("div",U({className:"page-new"},{children:e}))]}))};var F=function(){return F=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},F.apply(this,arguments)};const R=function(){var e=s.util.getParameterByName("status",window.location.href),t=s.util.getParameterByName("type",window.location.href),n=s.util.getParameterByName("url",window.location.href),o=s.util.getParameterByName("id",window.location.href),i=s.util.getParameterByName("username",window.location.href);return"public"===t&&"success"===e?(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",F({className:"middle-box middle-box--success margin-bottom-1"},{children:["You have successfully published your public page, you can view that from the link below. Other users can like, dislike or comment on your page if you haven't disabled them and we will send you notifications about them. You can view all the public and private pages you've created in"," ",(0,a.jsx)("strong",{children:(0,a.jsx)("a",F({className:"white-link",href:"/u/pages"},{children:"pages section."}))})]})),(0,a.jsx)("div",F({className:"center-content middle-box--link"},{children:(0,a.jsx)("a",F({className:"blue-link",href:"/public-pages/".concat(n)},{children:"View your public page"}))}))]}):"private"===t&&"success"===e?(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",F({className:"middle-box middle-box--success margin-bottom-1"},{children:["You have successfully created your private page, you can view that from the link below. To share this page with the persons you want, you should share the link of your page with them (link below). You can view all the public and private pages you've created in"," ",(0,a.jsx)("strong",{children:(0,a.jsx)("a",F({className:"white-link",href:"/u/pages"},{children:"pages section."}))})]})),(0,a.jsx)("div",F({className:"center-content middle-box--link"},{children:(0,a.jsx)("a",F({className:"blue-link",href:"/".concat(i,"/").concat(n)},{children:"View your private page"}))}))]}):"error-contents"===e?(0,a.jsxs)("div",{children:[(0,a.jsx)("div",F({className:"middle-box middle-box--error margin-bottom-1"},{children:"There was something wrong with the contents you've provided, please review your page contents and make sure that everything is OK."})),(0,a.jsx)("div",F({className:"center-content middle-box--link"},{children:(0,a.jsx)("a",F({className:"blue-link",href:"/new-page/initial-step?id=".concat(o)},{children:"Review your page"}))}))]}):(0,a.jsxs)("div",{children:[(0,a.jsx)("div",F({className:"middle-box middle-box--error margin-bottom-1"},{children:"Sorry something went wrong because of us! We will review what happened as soon as possible and let you know what was the issue. In the meanwhile please create your page again from scratch or view your draft pages via the links below. We apologize for the inconvenience."})),(0,a.jsxs)("div",F({className:"center-content middle-box--link"},{children:[(0,a.jsx)("a",F({className:"blue-link",href:"/new-page/initial-step"},{children:"Create a new page"})),(0,a.jsx)("br",{}),(0,a.jsx)("a",F({className:"blue-link",href:"/u/pages/draft"},{children:"View your draft pages"}))]}))]})},Y=function(){return(0,a.jsx)(o.VK,{children:(0,a.jsxs)(i.Z5,{children:[(0,a.jsx)(i.AW,{path:"/new-page/initial-step",element:(0,a.jsx)(f,{})}),(0,a.jsx)(i.AW,{path:"/new-page/page-contents",element:(0,a.jsx)(v,{})}),(0,a.jsx)(i.AW,{path:"/new-page/page-thumbnail",element:(0,a.jsx)(_,{})}),(0,a.jsx)(i.AW,{path:"/new-page/attach-files",element:(0,a.jsx)(C,{})}),(0,a.jsx)(i.AW,{path:"/new-page/attach-files",element:(0,a.jsx)(C,{})}),(0,a.jsx)(i.AW,{path:"/new-page/final-step",element:(0,a.jsx)(D,{})}),(0,a.jsx)(i.AW,{path:"/new-page/message",element:(0,a.jsx)(R,{})}),(0,a.jsx)(i.AW,{path:"/new-page",element:(0,a.jsx)(i.Fg,{to:"/new-page/initial-step",replace:!0})})]})})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,