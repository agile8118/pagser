"use strict";(self.webpackChunk_pagser_web=self.webpackChunk_pagser_web||[]).push([[791],{3037:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var r=t(2322),a=t(5185),i=t(8229),s=t(98),o=function(){return o=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e},o.apply(this,arguments)};const l=function(){var e=(0,a.v9)(s.NH),n=(0,a.v9)(s.pW),t=(0,a.v9)(s.jv),l=(0,a.I0)(),c=function(e){return t=void 0,r=void 0,o=function(){var t;return function(e,n){var t,r,a,i,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;s;)try{if(t=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){s.label=i[1];break}if(6===i[0]&&s.label<a[1]){s.label=a[1],a=i;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(i);break}a[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(e,s)}catch(e){i=[6,e],r=0}finally{t=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}}(this,(function(r){switch(r.label){case 0:(0,i.loadingModal)("Loading..."),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,i.request.patch("/rate/page/".concat(n),{rate:e},{auth:!0})];case 2:return t=r.sent(),l((0,s.Y4)(t)),[3,4];case 3:return 401===r.sent().status?(0,i.alert)("Please login to rate a page."):(0,i.alert)("An unknown error occurred."),[3,4];case 4:return(0,i.loadingModal)(),[2]}}))},new((a=void 0)||(a=Promise))((function(e,n){function i(e){try{l(o.next(e))}catch(e){n(e)}}function s(e){try{l(o.throw(e))}catch(e){n(e)}}function l(n){var t;n.done?e(n.value):(t=n.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,s)}l((o=o.apply(t,r||[])).next())}));var t,r,a,o};return e?(0,r.jsx)("div",{}):(0,r.jsx)("div",{children:(0,r.jsxs)("div",o({className:"page__rating"},{children:[(0,r.jsx)("p",{children:"How would you rate this page?"}),(0,r.jsxs)("div",{children:[(0,r.jsx)("span",{children:t.likes}),(0,r.jsx)("button",o({className:"btn-i btn-i-big btn-i-blue",onClick:function(){c("like")}},{children:(0,r.jsx)("i",{className:"fa fa-thumbs-up"})}))]}),(0,r.jsxs)("div",{children:[(0,r.jsx)("span",{children:t.dislikes}),(0,r.jsx)("button",o({className:"btn-i btn-i-big btn-i-blue",onClick:function(){c("dislike")}},{children:(0,r.jsx)("i",{className:"fa fa-thumbs-down"})}))]})]}))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,