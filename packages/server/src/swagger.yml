# --- SETUP --- #
openapi: 3.0.0
info:
  title: Pagser API
  version: 1.0.0
  description: All endpoints of Pagser
servers:
  - url: http://localhost:3080/api
    description: All JSON APIs
# --- TAGS --- #
tags:
  - name: Authentication
    description: for authenticating users
  - name: Page
    description: operations relating to public & private pages
paths:
  /send-code:
    # --- END POINT --- #
    post:
      tags:
        - Authentication
      summary: sends a code to the user email address for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the user
                name:
                  type: string
                  description: name of the user
                password:
                  type: string
                  description: password of the user
                username:
                  type: string
                  description: username of the user
              example:
                name: John Doe
                email: email@gmail.com
                password: Asdfzxcv1
                username: John100
      responses:
        200:
          description: A code was sent to the email address.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A brief message
                example:
                  message: code sent
        400:
          description: A bad value has been provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        422:
          description: Email or username is already in use.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  # --- END POINT --- #
  /username-availability:
    post:
      tags:
        - Authentication
      summary: checks in the database to see whether or not a username is taken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: the username which we want to check for availability
      responses:
        200:
          description: Username is available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A brief message
                example:
                  message: username is available
        400:
          description: A bad value has been provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        422:
          description: Username is already in use.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  # --- END POINT --- #
  /register:
    post:
      tags:
        - Authentication
      summary: registers the user to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: the username of the user
                email:
                  type: string
                  description: the email of the user
                password:
                  type: string
                  description: the password of the user
                name:
                  type: string
                  description: the name of the user
                userEmailVerificationCode:
                  type: string
                  description: the code that was sent to the specified email address
      responses:
        201:
          description: User was successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: token for the user to use for authentication
        400:
          description: A bad value has been provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        422:
          description: Username or email is already in use.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  # --- END POINT --- #
  /login:
    post:
      tags:
        - Authentication
      summary: logs the the user in to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: the email of the user
                password:
                  type: string
                  description: the password of the user
      responses:
        200:
          description: User data was valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: token for the user to use for authentication
        401:
          description: Email or password is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  # --- END POINT --- #
  /forgot-password:
    post:
      tags:
        - Authentication
      summary: sends an email to the user's email address to use to reset their password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: the email of the user
      responses:
        200:
          description: Email was sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A brief message
                example:
                  message: email was sent
        400:
          description: A bad value has been provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: No one with this email was found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  # --- END POINT --- #
  /reset-password:
    patch:
      tags:
        - Authentication
      summary: resets the user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: the id of the user
                password:
                  type: string
                  description: the new password
                token:
                  type: string
                  description: the code that was sent to the user's email address
      responses:
        200:
          description: Password was changed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A brief message
                example:
                  message: password was changed
        400:
          description: A bad value has been provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  # --------- FOR PAGES ------------ #
  # --- END POINT --- #
  /new-page/{stage}/{id}:
    patch:
      tags:
        - Page
      summary: updates or creates a page draft
      security:
         - ApiKeyAuth: []
      parameters:
        - in: path
          name: stage
          required: true
          schema:
            type: string
            enum:
              - "initial-step"
              - "page-contents"
              - "final-step"
          description: The stage of the draft page creation
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The id of the draft page
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  $ref: "#/components/schemas/DraftPage"
                  description: the content for the draft page
      responses:
        200:
          description: Draft page was updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message for draft page updated
                  id:
                    type: string
                    description: The id of the page updated
                example:
                  message: updated
                  id: ""
        201:
          description: Draft page was created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message for draft page creation
                  id:
                    type: string
                    description: The id of the page created
                example:
                  message: created
                  id: ""
        401:
          description: Not authenticated
        404:
          description: Draft page was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

# --- SCHEMAS --- #
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
  schemas:
    ErrorMessage:
      properties:
        message:
          type: string
      example:
        message: An error message
    DraftPage:
      properties:
        type:
          type: string
          description: Type of the page, either private or public
        url:
          type: string
          description: A url for the page if it's private
        contents:
          type: object
          properties:
            title:
              type: string
              description: A title for the page
            briefDes:
              type: string
              description: A description for the page
            body:
              type: string
              description: A body for the page
            targets:
              type: string
              description: A target for the page
        configurations:
          type: object
          properties:
            anonymously:
              type: boolean
              description: Whether or not the page should be created anonymously
            comments:
              type: boolean
              description: Whether or not users could comment on the page
            rating:
              type: boolean
              description: Whether or not likes & dislikes should be enabled for the page
            links:
              type: boolean
              description: Whether or not other related content should be shown on the page
      example:
        type: private
        url: ""
        contents:
          title: "Just another title"
          description: ""
          targets: ""
          body: "<p>Hi there!<p>"
        configurations:
            anonymously: false
            comments: true
            rating: true
            links: true
          
